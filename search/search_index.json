{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"README_orig/","text":"VisiData: il coltellino svizzero per i dati, che probabilmente non conosci \u21b5 VisiData \u00e8 un fantastico strumento open source per esplorare e manipolare dati. Mette insieme la chiarezza di un foglio di calcolo , con l'efficienza del terminale e la potenza di Python , in una utility leggera in grado di gestire milioni di righe con facilit\u00e0. La presentazione ufficiale fa un'ottima sintesi, ma non evidenzia la cosa che mi ha colpito di pi\u00f9: quella di Saul Pwanson (il creatore di VisiData) \u00e8 prima di ogni altra cosa una grande idea . Lo si capisce usandolo e spero che emerga anche dalle righe seguenti. Per usarlo non \u00e8 necessario essere uno sviluppatore ; se si conosce un po' Python, sar\u00e0 possibile usarlo in modo ancora pi\u00f9 sorprendente. Perch\u00e9 usarlo \u21b5 \u00c8 rapido , apre quasi istantaneamente file di diverse decine di megabyte ; \u00e8 agile , rende semplice la ricerca , il filtraggio , l' ordinamento ,il join e la ristrutturazione di dati tabellari; consente di avere in pochi passaggi una visione di insieme dei dataset su cui si vuole lavorare; apre molti dei formati tipici di testo strutturato (csv, tsv, xlsx , xls, json, xml, sqlite, shp, html, hdf5, xpt, sas7bdat, sav, dta) si utilizza soltanto da tastiera , ed \u00e8 possibile dimenticarsi del mouse; \u00e8 free ed open source . Apprezzo molto la sua rapidit\u00e0 e come offra in modo agile una visione di insieme sui dati. Questo, affiancato all'utilizzo da tastiera, lo rende un prodotto che d\u00e0 una marcia in pi\u00f9 a chi lo usa. Supportarne lo sviluppo \u21b5 Se VisiData vi piacer\u00e0 e lo utilizzerete, sar\u00e0 cosa buona supportarne lo sviluppo con una donazione . Io ho deciso di farlo e di esserne un \"patrono\"! Si fa da qui https://www.patreon.com/saulpw . Come si installa \u21b5 Per gli sviluppatori, per chi usa la riga di comando, \u00e8 molto facile . \u00c8 scritto in Python 3 e di base basta usare l'installer di Python: pip3 install visidata Per tutti gli altri, bisogna prima installare Python 3 , poi aprire il terminale e lanciare il comando di sopra. Su Windows non c'\u00e8 ancora un supporto diretto. \u00c8 per\u00f2 utilizzabile da chi ha Windows 10: c'\u00e8 da installare il Windows Linux Subsystem ( decine di guide per farlo ), poi installare Python 3 nel sistema Linux e infine dare il comando di sopra dal terminale di Linux. Cheat-sheet \u21b5 Abbiamo tradotto in italiano il cheat-sheet di VisiData, creato da Jeremy Singer Vine, disponibile in HTML e PDF . La versione fronte retro a cura di Gianni Vitrano \u21b5 Gianni Vitrano di OpenDataSicilia a partire da questo cheat-sheet, ha creato la versione da stampare fronte retro a \"libretto\" . Grazie Gianni! 10 Modi di usare Visidata \u21b5 Dieci esempi rapidi , che mostrano cosa \u00e8 possibile fare con VisiData. \u00c8 una sezione a cura di Salvatore Fiandaca (grazie). La guida \u21b5 VisiData \u00e8 un foglio elettronico a riga di comando . Potrebbe suonare come una contraddizione, perch\u00e9 si accosta qualcosa con interfaccia ricca (come un foglio elettronico) a qualcosa di visualmente molto minimale. In realt\u00e0 questa \u00e8 una delle idee forti di questa applicazione, che prende il meglio di questi due mondi: l'approccio a griglia e multi tabella del primo, e la rapidit\u00e0, l'immediatezza, l'essere easy e \"subito pronto\" di un terminale. Di base quindi bisogna prima aprire il terminale. Poi per aprire un file basta scrivere un comando con questa struttura: vd nomeFile.csv A seguire soltanto un piccolo estratto sul come usarlo. Per approfondire ho creato un elenco di URL consigliati . VisiData si usa al 99% con la tastiera, quindi \u00e8 bene che il Caps Lock non sia attivo: gli shortcut da tastiera non funzionerebbero correttamente (grazie Salvatore Fiandaca per la nota). Un esempio di apertura di un file grande \u21b5 \"Grande\" in informatica non vuol dire niente, \u00e8 come \"salato\" con un piatto di pasta. Un CSV grande per il mio PC (un notebook del 2015, con processore i7 e 8 GB di RAM) - se voglio lavorarci in modo \"visuale\" con un foglio elettronico - potrebbe essere gi\u00e0 un CSV da 500000 righe, che mi si apre dopo 1 minuto e 15 secondi e dove un \"trova e sostituisci\" diventa operazione molto lunga (uso LibreOffice Calc). Ci sono anche limiti che non sono personali. Se per esempio provassi a lavorare con uno dei dataset del \" Parco Circolante dei veicoli \" in Italia scoprirei dei limiti strumentali. Un esempio con i dati dell' Abruzzo : con il comando da shell wc -l parco_circolante_Abruzzo.csv leggo che \u00e8 composto da 1170439 righe. Con una regione \"piccola\" come questa si va gi\u00e0 oltre il limite di Calc, che \u00e8 di 1048576 righe. Se voglio comunque visualizzare 1048576 righe di questo dataset, sul mio PC sono necessari circa 5 minuti . Con VisiData lancio vd parco_circolante_Abruzzo.csv e lo visualizzo in 1 secondo . C'\u00e8 il \"trucco\", che \u00e8 invero una delle buone scelte del progettista: il file viene aperto in modo asincrono, caricandone subito una porzione navigabile. In basso a destra (vedi sotto) viene dato conto della percentuale di avanzamento che porter\u00e0 alla piena apertura (meno di 15 secondi). Questo essere \"subito pronto\" lo rende uno strumento di grande comodit\u00e0, che l'ha portato a essere uno dei miei quotidiani. Ribadisco per\u00f2 ancora un volta che il \"grande\" e la valutazione del tempo dipendono dagli obiettivi che si hanno, dalle proprie conoscenze di base e dall' hardware/software che si ha a disposizione. Per chiudere la tabella aperta e Visidata si pigia q sulla tastiera. NOTA BENE : questo file con i dati sul \"Parco Circolante dei veicoli\" in Abruzzo, verr\u00e0 usato in questa guida come dataset di base. Ne ho pertanto creato una copia di backup qui . Navigare tra i dati \u21b5 Per muoversi tra le celle si usano le 4 frecce direzionali dalla tastiera o (come vim, da cui nell'uso da tastiera VisiData prende molta ispirazione) h , j , k , l . Per muoversi in modo pi\u00f9 esteso: g + freccia in basso oppure gj , per andare all'ultima riga; g + freccia in alto oppure gk , per andare alla prima riga; g + freccia a sinistra oppure gh , per andare alla colonna pi\u00f9 a sinistra; g + freccia a destra oppure gl , per andare alla colonna pi\u00f9 a destra; PageDown oppure Control + Shift + f , una pagina in gi\u00f9; PageUp oppure Control + Shift + b , una pagina in alto. NOTA BENE : g \u00e8 il tasto per i comandi \"globali\". Per muoversi tramite ricerca testuale, sfruttando le espressioni regolari: / + regex , cerca in avanti nella colonna corrente; ? + regex , cerca indietro nella colonna corrente; g/ + regex , cerca in avanti in tutte le colonne; g? + regex , cerca indietro in tutte le colonne; Con n e N si va avanti e indietro rispetto agli elementi di output del risultato della ricerca. Infine per saltare a una determinata riga o colonna, rispettivamente zr e zc seguito dal numero di riga e colonna (la numerazione inizia da zero). I fogli \u21b5 In VisiData ci sono tre tipi di fogli: i fogli sorgente, con i dati che si \u00e8 scelto di aprire con VisiData; i fogli derivati, come quelli derivanti da filtraggio o la tabelle con le frequenze (vedi sotto); i metafogli, che descrivono e definiscono i dataset caricati (come quello che descrive ad esempio le colonne di una tabella, o il \"foglio dei fogli\"). Il \"foglio dei fogli\" si apre con Shift + s e fornisce l'elenco (e alcune informazioni correlate) di tutti i fogli aperti. Selezionandone uno e pigiando Invio , quest'ultimo si aprir\u00e0. Per rinominarne uno dal \"foglio dei fogli\", basta selezionarlo, premere e e inserire il nuovo nome e poi dare Invio . O in alternativa, se si \u00e8 davanti al foglio che si vuole rinominare, premere la barra spaziatrice , scrivere rename-sheet , digitare il nuovo nome e infine pigiare su Invio . Il foglio correntemente aperto si chiude con q . Lavorare sulle righe \u21b5 La cosa pi\u00f9 importante da comprendere \u00e8 come selezionarle e deselezionarle, perch\u00e9 molte delle operazioni vengono eseguite proprio su quelle selezionate. I tasti principali di selezione sono: s , per selezionare la riga corrente; u , per deselezionare la riga corrente; t , per invertire la selezione della riga corrente; gs , per selezionare tutte le righe; gu , per deselezionare tutte le righe; gt , per invertire i criteri di selezione per tutte le righe. Selezione di righe tramite espressione regolare \u21b5 | + termine da ricercare , seleziona tutte le righe in cui c'\u00e8 corrispondenza per la colonna corrente; \\ + termine da ricercare , deseleziona tutte le righe in cui c'\u00e8 corrispondenza per la colonna corrente; g| + termine da ricercare , seleziona tutte le righe in cui c'\u00e8 corrispondenza per una qualsiasi colonna; g\\ + termine da ricercare , deseleziona tutte le righe in cui c'\u00e8 corrispondenza per una qualsiasi colonna; , , dato il valore della cella selezionata, seleziona tutte le righe in cui per la colonna corrente c'\u00e8 corrispondenza; g, , seleziona tutte le righe uguali a quelle corrente. Se ad esempio: ci si sposta nella colonna provincia_residenza poi si pigia | ; si digita TERAMO ; si preme Invio . ... si ottiene qualcosa come quella di sotto. Selezione di righe tramite espressioni Python \u21b5 \u00c8 possibile fare una selezione di righe tramite un'espressione di Python ( qui per approfondire sui concetti di base delle espressioni). I comandi da tastiera sono: z| , per selezionare tutte le righe in cui l'espressione \u00e8 valida; z\\ , per deselezionare tutte le righe in cui l'espressione \u00e8 valida. Ad esempio seguendo questi step: gu , per deselezionare tutto; z| , per attivare la selezione tramite espressione Python; scrivendo provincia_residenza == \"PESCARA\" and sesso == \"F\" ; e pigiando su Invio . ... verranno selezionati tutti gli elementi in cui la provincia \u00e8 \"Pescara\" ed il sesso \u00e8 \"F\". Selezione di righe tramite espressioni Python e regex \u21b5 si digita z| ; si scrive l'espressione, come ad esempio re.search(\"^1\", FieldB) and re.search(\"^2\", FieldA) , ovvero tutte le righe in cui il campo FieldB inizia per 1 e il campo FieldA per 2 . Selezionare un numero random di righe \u21b5 aprire una tabella; fare click sulla barra spaziatrice; scrivere random-rows (si pu\u00f2 scrivere anche soltanto ad esempio ran e autocompletare con TAB ) e premere INVIO ; scrivere il numero di righe random che si vogliono selezionare. Spostare righe \u21b5 Si fa con queste combinazioni: Shift+j , per spostare la riga corrente verso il basso; Shift+k , per spostare la riga corrente verso l'alto. Cancellare righe \u21b5 d per cancellare la riga corrente; gd per cancellare le righe selezionate. Modificare il contenuto \u21b5 Questi i comandi di base: e , per modificare la cella corrente; Enter , per chiudere la modifica; Control+c , per cancellare la modifica; Control+a , per andare a inizio linea; Control+e , per andare a fine linea; Control+k , per cancellare il contenuto a partire dalla posizione del cursore. Lavorare sulle colonne \u21b5 Ogni colonna in VisiData ha 3 attributi principali: Name , il nome della colonna; Width , la larghezza a schermo della colonna (se impostata a 0, la colonna diventa invisibile); Type , per definire se contiene testi, numeri interi, numeri decimali, monete o date. Il foglio delle colonne \u21b5 In VisiData esistono i cosiddetti meta-fogli (vedi sopra ): uno di questi \u00e8 il foglio delle colonne, che elenca tutte le colonne e i relativi attributi di una tabella. A partire dalla visualizzazione di una tabella, si apre con Shift+c . \u00c8 una delle caratteristiche di VisiData che consente una rapida prima lettura del dato, che personalmente uso anche ad esempio per costruire brevi relazioni che contengono schema dati. Impostare il tipo di campo \u21b5 Come impostazione predefinita VisiData imposta a \"testo\" la tipologia di tutti i campi (che \u00e8 quello che faccio di solito anche io alla prima apertura sia in un foglio elettronico che in Pandas). Per definire il tipo di campo di una colonna della tabella che si sta visualizzando (cosa che consente di fare correttamente ad esempio operazioni di ordinamento, matematiche, ecc.), si deve navigare sino alla colonna su cui si vuole intervenire e poi pigiare: # , per definire un campo con numeri interi (0, -1, 5000000) % , per definire un campo con numeri decimali (0.5, -3.14, 23.45557) $ , per definire un campo con monete ($4.99, \u20ac20) @ , per definire un campo con date (2018-04-06, April 6, 2018, 04/06/2018) ~ , per definire un campo di testo (qualsiasi cosa!) Impostare numero di decimali in un campo floating \u21b5 Di default i campi floating sono renderizzati con due decimali (la formattazione \u00e8 impostata come %.02f ). Per modificare la cosa si pu\u00f2 aprire il foglio delle colonne ( SHIFT+c ) e modificare il valore di formattazione delle colonna fmtstr (vedi sotto). Per passare a tre decimali per un campo, baster\u00e0 ad esempio modificare la cella della colonna di interesse da %.02f a %.03f (in edit di cella si va con il tasto e ). Se si vuole fare su pi\u00f9 colonne: si apre sempre il foglio delle colonne; si selezionano le colonne di cui si vuole cambiare la formattazione; si va sulla colonna fmtstr ; si va in modifica globale con ge e si inserisce il valore di formattazione desiderato; si preme INVIO per applicare la modifica. Impostare formato data personalizzato \u21b5 Se una cella contiene ad esempio la data 06/11/2020 (qui come 6 novembre 2020), e imposto la colonna come data con il tasto @ , visidata la interpreta come 2020-06-11 , ovvero come 11 giugno. Per impostarla correttamente bisogna impostare un formato data personalizzato: si va sulla colonna con le date; si digita z@ e si preme INVIO ; si imposta il formato - in questo caso %d/%m/%Y - e si preme INVIO . In output si avr\u00e0 2020-11-06 . Rinominare le colonne \u21b5 Per farlo si naviga sino alla colonna che si vuole rinominare e poi: si pigia ^ ; si digita il nome che si vuole assegnare; si pigia Invio . Rinominare le colonne in blocco \u21b5 Pu\u00f2 essere utile ad esempio anteporre dei caratteri a tutte le colonne che iniziano per t . Questi i passi: si apre il foglio colonne con shift + c ; si va nella colonna con il nome delle colonne (\u00e8 la prima); si digita | , si scrive ^t e si pigia INVIO (saranno selezionate tutte le colonne che iniziano con il carattere t ); si pigia g* , per attivare il trova e sostituisci via regex ; si scrive ^(t.+)/TR_\\1 e poi INVIO . Tutte le colonne che iniziano per t , avranno un nuovo nome corrispondente al precedente, con TR_ come prefisso. La colonna tabacco , diventerebbe ad esempio TR_tabacco . Come espandere, ridurre e rimuovere colonne \u21b5 Questi gli shortcut: _ , per espandere la larghezza della colonna corrente, alla larghezza massima del testo contenuto nella stessa, tenendo conto delle righe visualizzate a schermo; g_ , per espandere la larghezza di tutte le colonne, alla larghezza massima del testo contenuto, tenendo conto delle righe visualizzate a schermo; z_ + n , per impostare la larghezza della colonna corrente a n caratteri; - , per nascondere la colonna corrente (viene impostata a 0 la sua larghezza); gv , per scoprire tutte le colonne nascoste; z- , per ridurre la larghezza della colonna corrente alla sua met\u00e0. Spostare una colonna \u21b5 Ecco come farlo: Shift+h , sposta la colonna corrente di una posizione a sinistra; Shift+l , sposta la colonna corrente di una posizione a destra. Modificare una colonna tramite un'espressione Python \u21b5 A questa tabella si vuole assegnare al campo FieldA il valore di FieldB , tutte le volte che FieldA \u00e8 vuoto. FieldA FieldB 1 3 1 12 Questa la procedura: gs per selezionare tutte le righe; g= per scrivere l'espressione Python; aggiungere come espressione FieldB if FieldA==\"\" else FieldA . Ovvero ( FieldA ) \u00e8 uguale FieldB se FieldA non contiene nulla, altrimenti \u00e8 uguale a se stesso (rimane invariato). Calcoli per colonna \u21b5 \u00c8 possibile avere restituito, per una colonna, il risultato di uno dei calcoli di aggregazione disponibili: Ad esempio per avere la somma dei valori di una colonna con numeri interi: si imposta il tipo di colonna a numero intero (con # ); si digita z+ e poi INVIO ; si digita sum e poi INVIO . In basso, si legger\u00e0 il valore risultante. NOTA BENE : se nessuna riga \u00e8 selezionata si avr\u00e0 il totale per colonna, altrimenti il calcolo sar\u00e0 applicato per colonna alle sole righe selezionate. Come definire una colonna chiave \u21b5 Per ogni foglio \u00e8 possibile definire una o pi\u00f9 colonne chiave. Hanno due funzioni principali: rimangono fissate sul lato sinistro, quando si naviga orizzontalmente sulla tabella; hanno una funzione speciale quando si fanno certe operazioni (come quelle di JOIN , per alcuni conteggi, ecc.). Per definire una colonna chiave (e vice-versa) si naviga sino alla colonna di interesse e si pigia ! . Manipolare le colonne dal foglio delle colonne \u21b5 Il foglio delle colonne oltre a dare una visione di insieme, consente di fare delle rapide modifiche in blocco. \u00c8 possibile spostare le colonne con Shift+j e Shift+k , rinominarle con e , impostare il tipo per tutte quelle selezionate, impostare la larghezza per tutte quelle selezionate. Ad esempio a partire dal Parco Circolante dei veicoli dell'Abruzzo, il foglio colonne ( Shift+c ) appare in questo modo. Se si vuole impostare a \"numero intero\" le colonne progressivo e eta_intestatario , bisogner\u00e0 prima selezionarle con s . Poi premere g# . Creare una nuova colonna \u21b5 Sono tre le modalit\u00e0 pi\u00f9 comode: come risultato di un'espressione Python; come risultato di un comando di split ; come risultato di estrazione di una porzione di testo da una colonna. Nuova colonna tramite espressione \u21b5 Ad esempio potrebbe essere utile creare una colonna vero/falso, per tutte le auto del Parco Circolante dei veicoli dell'Abruzzo, con cilindrata maggiore ai 643 (\u00e8 un numero a caso). Per farlo: navigare sino alla colonna cilindrata ; premere % per impostarla come numero decimale; pigiare su = ; nel prompt in basso a sinistra scrivere cilindrata > 643 ; premere Invio . In output qualcosa come quella di sotto, con la nuova colonna risultato di un'espressione Python. Nuove colonne come risultato di splitting \u21b5 Si possono creare nuove colonne, come risultato di una suddivisione di una gi\u00e0 esistente. Ad esempio nel campo data_immatricolazione \u00e8 contenuta sia la data che l'orario, separati da spazio (i.e. 1995-04-03 00:00:00 ). Se si vuole suddividerla in due colonne (data e orario), si pu\u00f2 procedere in questo modo: si naviga sino alla colonna data_immatricolazione ; si preme : ; si sceglie la stringa di testo (definibile anche come espressione regolare) da usare come separatore e si scrive in basso a sinistra nel prompt . In questo caso \u00e8 lo spazio; si digita quindi lo spazio e si d\u00e0 Invio . Come output si avr\u00e0 qualcosa come quella di sotto: due colonne frutto della divisione in pi\u00f9 colonne, sfruttando come separatore lo spazio. Nuove colonne come risultato di cattura e estrazione \u21b5 Per farlo ci vogliono delle conoscenze di base sulle espressioni regolari (che sono una conoscenza propedeutica per chiunque lavori con i dati). Se si vuole ad esempio estrarre l'anno dalla celle che contiene il valore 1995-04-03 00:00:00 , baster\u00e0 definire l'espressione regolare che estrae a partire dall'inizio della cella i primi 4 numeri. Che in termini di espressione regolare \u00e8 ^[0-9]{4} . Per creare una nuova colonna a partire dalla definizione di un'espressione regolare da usare come \"estrattore\", si procede in questo modo: si naviga sulla colonna data_immatricolazione ; si pigia ; ; si scrive nel prompt in basso a sinistra ^([0-9]{4}) . Sono state inserite le parentesi tonde, perch\u00e9 la cattura si fa a partire dalla definizione di un gruppo; si pigia Invio . E si ottiene qualcosa come quella di sotto: Trasformare una colonna tramite espressione regolare (trova e sostituisci) \u21b5 Su ogni colonna \u00e8 possibile fare delle trasformazioni basate su espressioni regolari. Se ad esempio si vogliono rimuovere dalle celle della colonna data_immatricolazione le informazioni sull'orario e passare quindi da 1995-04-03 00:00:00 a 1995-04-03 si pu\u00f2 procedere in questo modo: si selezionano le righe su cui si vuole fare questa trasformazione (se sono tutte il comando \u00e8 gs ); si va nella colonna data_immatricolazione ; si pigia su g* ; si scrive nel prompt .*$/ . Il simbolo / in VisiData separa ci\u00f2 che si cerca, da ci\u00f2 con cui si vuole sostituire. Qui si cerca uno spazio ( ), seguito da qualsiasi carattere sino a fine cella ( .*$ ), e si vuole sostituire con nulla; si pigia Invio (ci vorr\u00e0 un po' di tempo, sono pi\u00f9 di un milione di righe). Il risultato sar\u00e0 qualcosa come quella di sotto: Questo \u00e8 un \"trova e sostituisci\" per colonna. Il foglio delle frequenze \u21b5 Questa \u00e8 una delle funzioni che uso di pi\u00f9 ed \u00e8 un'altra gran bell'idea. A partire da una colonna (o dalla combinazione di pi\u00f9 d'una) \u00e8 possibile - con Shift+f - aprire un foglio derivato, che contiene dei dati relativi al conteggio per valori distinti di quanto contenuto in quella colonna. Se per esempio a partire dal Parco Circolante dei veicoli dell'Abruzzo, si volesse avere un'idea sulla distribuzione per \"marca\", basta navigare in vista tabella sino a quella colonna e poi pigiare Shift+f e avere qualcosa come quella di sotto. I dati sono ordinati per conteggio ed emerge subito come una famosa marca nazionale da sola faccia \u00bc del campione. Cos\u00ec come emerge che c'\u00e8 un 5% di elementi in cui la marca non \u00e8 definita e anche questa \u00e8 un'informazione che ci potrebbe consentire da subito di prendere delle decisioni. Molto comoda anche la colonna histogram che da visivamente in modo molto diretto un'idea del rapporto tra i numeri descritti in tabella. Lavorare sulle celle \u21b5 Fare un trova e sostituisci globale \u21b5 Si parte dal selezionare le righe su cui si vuole eseguire l'operazione (se sono tutte il comando \u00e8 gs ). Digitare gz* e poi scrivere stringa da trovare / stringa da sostituire e dare INVIO . Se ad esempio volessi sostituire la stringa pal con mis , dovrei scrivere pal/mis . \u00c8 possibile usare anche le espressioni regolari. Ordinare e filtrare \u21b5 Ordinare righe \u21b5 I tasti [ e ] ordinano i dati rispettivamente in modo crescente e decrescente, a partire dalla colonna attiva. Filtrare righe \u21b5 \u00c8 possibile estrarre in vari modi un campione delle righe della tabella visualizzata. Quello di base \u00e8 a partire dalla selezione delle righe (in uno dei modi visti sopra) e poi pigiare \" . Ad esempio si naviga sino alla colonna marca , si preme | , si scrive chevr , si pigia Invio (vengono selezionati tutti i record associati a CHEVROLET ) e infine si preme \" . Si avr\u00e0 una tabella filtrata, con gli 8814 record relativi a questa marca per l'Abruzzo. Oppure posso farlo a partire da un \"foglio delle frequenze\" (vedi qui ): si naviga sino alla colonna marca ; si pigia Shift+f , che mi da in output il conteggio dei valori distinti per marca (sono pi\u00f9 di un milione di record, ci vorr\u00e0 un po' di tempo); si scorre sino alla riga che contiene la marca che si vuole filtrare; si pigia Invio e si avr\u00e0 una tabella filtrata, con i record relativi a quella marca per l'Abruzzo. Dal foglio delle frequenze \u00e8 possibile filtrare su pi\u00f9 di un elemento: si selezionano ad esempio tre marche, pigiando s per ognuna; si chiude il foglio delle frequenze con q e si torna al foglio dati; si pigia \" e si ottiene una tabella filtrata con i dati relativi alle sole tre marche selezionate prima. Filtro tramite espressione Python \u21b5 \u00c8 possibile filtrare righe tramite un' espressione Python ( qui la documentazione ufficiale e qui una guida che consiglio). Se ad esempio dalla tabella di sotto si volessero soltanto le province con pi\u00f9 di 350.000 abitanti basterebbe: per prima cosa impostare il campo Popolazione come numerico, pigiando # ; pigiare z| per attivare il filtro tramite espressione Python; scrivere l'espressione basata sulla colonna, che qui \u00e8 Popolazione>350000 e poi premere INVIO . In output si avr\u00e0 la selezione di tutte le righe che risolvono l'espressione scritta. Note: nel filtro per espressione c'\u00e8 l'autocompletamento del nome colonna, quindi se si scrive ad esempio Pop e poi si fa click su TAB , viene restituito a schermo Popolazione ; \u00e8 possibile scrivere espressioni complesse, che fanno riferimento a pi\u00f9 colonne. Filtro tramite espressione Python su campo datetime \u21b5 \u00c8 possibile filtrare righe tramite un'espressione Python a partire da campi datetime , dopo averli impostare come data. Usando questo file CSV (by PCM-DPC ), se ad esempio dalla tabella di sotto si volessero soltanto i record con giorno 29: basterebbe: per prima cosa impostare il campo data come data, pigiando @ ; pigiare z| per attivare il filtro tramite espressione Python; scrivere l'espressione basata sulla colonna, che qui \u00e8 data.day == 29 e poi premere INVIO . In output si avr\u00e0 la selezione di tutte le righe che risolvono l'espressione scritta. Osservazioni: oltre a day \u00e8 possibile usare: month , year e hour Se si vogliono ad esempio selezionare soltanto righe con date nel futuro, l'espressione sar\u00e0 data > datetime.datetime.now() . Filtri tramite espressioni python, basati su pi\u00f9 colonne \u21b5 Si vogliono ad esempio selezionare tutte le righe in cui il domicilio non \u00e8 n\u00e9 a Palermo, n\u00e9 a Ragusa, ma la cui residenza \u00e8 in una di queste due citt\u00e0. A partire ad esempio da: domicilio residenza PA PA RG RG TO TO VE PA Questa la procedura: pigiare z| per selezionare tramite espressione Python; scrivere re.search(\"^(?!PA|RG).*\", domicilio) and re.search(\"(PA|RG)\", residenza) ; premere INVIO . La prima \u00e8 una speciale condizione di regex , che cerca al negativo. Sar\u00e0 selezionata soltanto la riga seguente: domicilio residenza VE PA Riepilogo dei dati \u21b5 Uno dei modi per avere un riepilogo \u00e8 usare il foglio delle frequenze (vedi qui ). \u00c8 possibile generare un foglio delle frequenze anche basato su pi\u00f9 colonne. Per farlo si impostano come colonne chiave ( qui come fare) quelle che si vogliono trasformare in \"foglio delle frequenze\", e poi si pigia g+Shift+f . Qui sotto ad esempio un riepilogo per le coppie univoche di destinazione/alimentazione . Aggiunta di aggregatori \u21b5 I fogli di frequenza, oltre al conteggio per valori distinti, possono contenere altri calcoli. Gli \"aggregatori\" possibili sono min , max , avg / mean , median , q3/q4/q5/q10 (terzili/quartili/quintili/decili), sum , distinct , count e keymax . Ad esempio per ogni provincia si pu\u00f2 avere restituito la distribuzione di et\u00e0 per quartile e scoprire che il 50% del campione \u00e8 compreso nella fascia di et\u00e0 tra i 18 e circa i 55 anni. Per aggiungere l'aggregatore q4 al foglio delle frequenze, bisogna seguire questi passi: navigare sino alla colonna eta_intestatario e impostarla a numero intero con # ; premere + e scrivere (in basso a sinistra) q4 (per il calcolo dei quartili, quindi al 25, 50 e 75 percento); navigare sino alla colonna provincia_residenza e pigiare Shift+f . Inizier\u00e0 da subito il calcolo (che non \u00e8 immediato, sono pi\u00f9 di un milione di righe) e alla fine si avr\u00e0 qualcosa come l'immagine di sopra (non \u00e8 fico VisiData?). Il riepilogo globale \u21b5 Per avere una visione a \"volo d'uccello\" sull'intera tabella esiste il comando Shift+i , che restituisce un riepilogo statistico per tutte le colonne. Se prima di lanciarlo si definiscono correttamente i campi (ad esempio i numerici, come numerici), verranno eseguiti correttamente anche i calcoli per min , max , median , mean , stdev . Questa \u00e8 un'altra feature di grande comodit\u00e0 (presente in molte applicazione e ambienti per analisi dati), che verr\u00e0 usata molto da chi lavorer\u00e0 con VisiData. Salvare un foglio \u21b5 Per salvare un foglio si preme CTRL+s , poi si scrive il nome del file con estensione ( nomeEsempio.csv ) e infine si pigia Invio . Fare il redirect dell'output verso lo stdout \u21b5 Il comando vd input.csv -b --save-filetype json | jq . invier\u00e0 ad esempio a jq un output JSON a partire dal CSV di input . Se ad esempio si vuole passare l'output a grep: vd input.csv -b --save-filetype tsv 2> /dev/null | grep 'a' 2> /dev/null per non avere stderr a schermo. Fare JOIN tra tabelle \u21b5 Se ad esempio si volesse calcolare il rapporto tra numero di mezzi e popolazione, sarebbe utile fare un JOIN con una tabella con i dati della popolazione residente. I dati per provincia sono quelli di sotto e sono stati salvati in un file TSV denominato popolazioneAbruzzo.tsv (fonte ISTAT ). Provincia Popolazione L'AQUILA 300404 TERAMO 308284 PESCARA 319388 CHIETI 387120 Si pu\u00f2 fare in questo modo: si parte da vd parco_circolante_Abruzzo.csv ; si va sulla colonna provincia_residenza ; si calcola il foglio delle frequenze pigiando Shift+f e si ottiene si rinomina questo foglio frequenze premendo la barra spaziatrice, scrivendo il comando rename-sheet e dando poi Invio . E poi inserendo il nome nuovo (ad esempio mezziProvincia ); si apre la tabella con i dati sulla popolazione per provincia, pigiando o , scrivendo popolazioneAbruzzo.tsv (che \u00e8 il nome del file) e pigiando Invio (NOTA BENE si pu\u00f2 scrivere anche soltanto popo e poi pigiare TAB e il nome del file verr\u00e0 autocompletato). Si otterr\u00e0 si va nella colonna Provincia e si preme ! per impostarla come colonna chiave. Il JOIN in VisiData viene fatto tra colonne chiave; si apre il \"foglio dei fogli\" con Shift+s e si visualizzer\u00e0 qualcosa come; si va nella riga che contiene lo sheet popolazioneAbruzzo e si pigia INVIO ; si va di nuovo nella colonna Provincia e si preme ! per impostarla come colonna chiave; si apre il \"foglio dei fogli\" con Shift+s ; si selezionano con s le due tabelle mezziProvincia e popolazioneAbruzzo ; si pigia & che \u00e8 il comando di JOIN e in basso a sinistra ci viene chiesto quale tipo si vuole applicare ( nota bene : con VisiData >2.0 si deve premere CTRL + x e scegliere il tipo di JOIN ); si scrive inner e si pigia Invio e si ottiene una tabella che contiene sia il numero di mezzi per provincia, che il numero di abitanti. Da questa tabella a questo punto, semplificando un po', si potrebbe rapidamente calcolare il numero macchine per persona, in questo modo: si va nella colonna Popolazione e si preme # per impostarla come numero intero; si pigia = (per creare una nuova colonna con valori frutto di un'espressione); si scrive poi nel prompt count/Popolazione (c'\u00e8 l'autocompletamento con TAB dei nomi delle colonne); e si ottiene un risultato come quello di sotto. Concatenare tabelle \u21b5 La concatenazione tra due o pi\u00f9 tabelle con la stessa struttura si attiva tramite & . Ad esempio, a partire dai due file inputFileOne.csv e inputFileTwo.csv , presenti qui si procede in questo modo: si apre la shell e si va nella cartella che contiene i file da concatenare; si scrive vd e si preme Invio ; si seleziona la prima voce DirSheet for the current directory e si preme invio ; si selezionano con s i due file; si preme g Invio per aprirli entrambi; si apre il foglio dei fogli con Shift+s ; si selezionano inputFileOne.csv e inputFileTwo.csv con s ; si preme & per attivare la concatenazione; si preme Ctrl+X per il menu; si seleziona append e poi si preme Invio . Si avr\u00e0 a video l'unione dei due file di input (in questo video una replica di quanto descritto, per versioni vd < 2 ). Tabelle Pivot \u21b5 Ecco ad esempio come creare quella che da conto del numero di mezzi per marca, suddivisi per provincia: si va nella colonna marca e si imposta come colonna chiave, premendo ! ; si va poi nella colonna provincia_residenza e si pigia Shift+w ; si ottiene la tabella pivot desiderata. Se invece del conteggio delle occorrenze si volesse (a partire da un altro campo) calcolare un altro dato aggregato - come ad esempio l'et\u00e0 media per marca e provincia - si pu\u00f2 procedere in questo modo: si va nella colonna eta_intestatario e si imposta a numero intero, pigiando su # ; si preme + , poi in basso a sinistra nel prompt si scrive avg e infine si d\u00e0 Invio ; si va di nuovo nella colonna provincia_residenza e si pigia Shift+w . In output, per ogni provincia, si avr\u00e0 quindi la media desiderata. Creare un grafico di dispersione (scatter plot) \u21b5 VisiData pu\u00f2 stampare a schermo anche dei grafici XY. Non \u00e8 un suo punto di forza, ma pu\u00f2 essere utile per avere una prima e grezza visualizzazione spaziale dell'insieme dei dati. Il requisito per crearne uno, \u00e8 avere due colonne numeriche, da usare come coppia di coordinate. Qualcosa come quella di sotto. fid X Y 1 12.29 43.76 2 12.16 43.64 3 12.15 43.65 4 12.16 43.63 ... ... ... Per generare il grafico baster\u00e0 seguire i seguenti passi: impostare come numeriche (numeri decimali digitando % sulla colonna, o # per numeri interi) le due colonne con le coordinate; impostare come colonna chiave la colonna con le ascisse, selezionandola e digitando ! ; selezionare la colonna con le ordinate e digitare . . In output si avr\u00e0 qualcosa come quella di sotto Moduli Python \u21b5 VisiData \u00e8 un foglio elettronico basato su Python 3. Questo consente di utilizzare al suo interno la galassia dei moduli disponibili per Python. Per farlo, bisogna precaricare questi moduli all'avvio di VisiData. Questo si realizza modificando il file di configurazione del programma - si chiama .visidatarc - contenuto nella cartella home dell'utente. Se si vuole ad esempio sfruttare il modulo datetime , si apre in modifica il file .visidatarc e si aggiunge la riga from datetime import datetime Poi si salva il file e si fa partire VisiData. Se ad esempio si vuole fare un'analisi sulla data di immatricolazione per mese a partire dalla colonna data_immatricolazione e si volesse sfruttare il modulo datetime , si pu\u00f2 procedere in questo modo: si va nella colonna data_immatricolazione ; si preme = ; si scrive nel prompt datetime.strptime(data_immatricolazione, '%Y-%m-%d %H:%M:%S').month e si pigia Invio . Si ottiene qualcosa come quella di sotto: E a questo punto si pu\u00f2 rinominare la colonna premendo ^ , scrivendo \"mese\" e poi premendo Invio . E poi creare il foglio delle frequenze della colonna mese , pigiando Shift+f e scoprire che in Abruzzo si immatricola soprattutto a gennaio. NOTA BENE : le funzioni del modulo datetime sono disponibili in modo nativo per le colonne gi\u00e0 impostate (come tipo) a data. Quanto scritto sopra vale soprattutto come guida al come precaricare e utilizzare un modulo Python in VisiData. Salvare un flusso di lavoro \u21b5 Introduzione \u21b5 In VisiData \u00e8 possibile salvare il log delle operazione fatte e riutilizzarlo per applicarle nuovamente al file di input. Se ad esempio a partire da questo file CSV (sotto l'anteprima) si volessero cancellare tutte le righe che contengono il solo carattere a nella prima colonna e infine salvare l' output , la procedura \u00e8: vd input.csv ; posizionarsi nella prima colonna e pigiare | per attivare la selezione tramite espressione regolare, scrivere ^a$ e premere INVIO . Verr\u00e0 fatta la selezione descritta; pigiare in sequenza g e d per cancellare le righe selezionate; poi CTRL+s ; e infine scegliere un nome di output (ad esempio output.csv ) e pigiare INVIO per salvare il file. field1 field2 a 0 b 3 a 4 c 5 Per salvare la procedura di sopra in un file di log, bisogner\u00e0 premere CTRL+d , scegliere un nome per salvare il file (ad esempio cancella_le_a.vd ) e pigiare INVIO . Il file di log salvato avr\u00e0 un contenuto come quello sottostante ( \u00e8 un file TSV ), in cui sono \"mappate\" tutte le operazioni fatte: sheet col row longname input keystrokes comment global null_value set-option open-file input.csv o input field1 select-col-regex ^a$ input delete-selected gd delete (cut) selected rows and move them to clipboard input save-sheet output.csv ^S save current sheet to filename in format determined by extension (default .tsv) Per riapplicare la stessa procedura al file, senza interagire con lo schermo, il comando da lanciare \u00e8: vd -b -p cancella_le_a.vd -b per eseguire VisiData senza attivarne l'interfaccia; -p per replicare un file di log. Se questo comando si lancia dopo avere gi\u00e0 creato il file di output , si avr\u00e0 un messaggio di errore, che avvisa che il file esiste gi\u00e0 e non pu\u00f2 essere sovrascritto. Per fare in modo che venga sovrascritto bisogner\u00e0 aggiungere l'opzione -y : vd -y -b -p cancella_le_a.vd A schermo verr\u00e0 restituito l'elenco delle operazione svolte: opening cancella_le_a.vd as vd \"input.csv\" opening input.csv as csv select rows matching regex in current column \"^a$\" search wrapped 2 matches for /^a$/ selected 2 rows delete (cut) selected rows and move them to clipboard copied 2 rows to clipboard deleted 2 rows save current sheet to filename in format determined by extension (default .tsv) \"output.csv\" saving 1 sheets to output.csv as csv replay complete Applicare lo stesso flusso a un file diverso, ma omologo \u21b5 Spesso si ha la necessit\u00e0 di applicare una stessa procedura ad altri file , con la stessa struttura , ma con contenuti differenti . Per utilizzare il file di log creato con un file diverso da input.csv , bisogner\u00e0 modificare il file di log (si modifica con qualsiasi editor di testo): rimuovere la riga con il riferimento a input.csv rimuovere il riferimento al nome del foglio (qui \u00e8 input , come il nome del file). Diventer\u00e0 quindi: sheet col row longname input keystrokes comment global null_value set-option field1 select-col-regex ^a$ delete-selected gd delete (cut) selected rows and move them to clipboard save-sheet output.csv ^S save current sheet to filename in format determined by extension (default .tsv) Fatto questo, il comando da usare con un nuovo file denominato ad esempio input_nuovo.csv sar\u00e0: vd -y -b -p cancella_le_a.vd input_nuovo.csv In output verr\u00e0 creato il file output.csv . Se si vuole creare un file di output con nome diverso, si deve cancellare dal file di log la riga in cui si fa riferimento a output.csv e lanciare il comando: vd -y -b -p cancella_le_a.vd input_nuovo.csv -o output_nuovo.csv Nota sul file di log \u21b5 Si tratta di un TSV, quindi \u00e8 possibile leggerlo e modificarlo proprio con VisiData : Soluzione problemi \u21b5 Riga attiva di colore nero \u21b5 Quando si usa VisiData su Windows Subsystem for Linux, la riga attiva risulta invisibile perch\u00e9 tutta nera. Per fare in modo che torni \"visibile\" bisogna modificare il file di configurazione di VisiData. Questo file di default non esiste: si deve trovare nella home dell'utente (quindi in ~ ) e si deve nominare come .visidatarc . Questi i passi: ## vai nella cartella home dell'utente cd ~ ## nano \u00e8 un editor di testo, si installa con \"sudo apt-get install nano. ## Si pu\u00f2 esare usare qualsiasi editor per modificare il file nano .visidatarc Si aprir\u00e0 il file .visidatarc a cui bisogner\u00e0 aggiungere le stringhe sottostanti e poi salvare il file. options.color_key_col='' options.color_selected_row='yellow' options.color_note_type='yellow' options.color_graph_hidden='blue' options.color_column_sep='blue' options.null_value=\"\" options.color_key_col=\"blue\" Caratteri non leggibili in Windows Subsystem for Linux \u21b5 Se si usa VisiData in Windows Subsystem for Linux, alcuni caratteri possono risultare non leggibili. Questo dipende dal font usato. Per cambiarlo: click con il destro del mouse sulla barra; e scegliere Propriet\u00e0. Infine si consiglia il font di sotto: Ricette \u21b5 Salvare una tabella HTML in CSV, a partire da una pagina web \u21b5 In questo esempio il presupposto \u00e8 che si voglia trasformare in CSV una tabella HTML presente in una pagina web, in cui ci sono pi\u00f9 tabelle. Il punto di partenza \u00e8 quello di estrarre dalla pagina sorgente, una pagina HTML che contiene soltanto la tabella di interesse. La pagina di esempio \u00e8: https://web.archive.org/web/20190618071304/http://www.sias.regione.sicilia.it/NHEOWLH140_00_1.html Questa \u00e8 composta da diverse tabelle. Quella di interesse \u00e8 l'unica composta da pi\u00f9 di 7 colonne, e la query XPATH per estrarla \u00e8 //table[count(tr/td)>7] . La pagina di origine ha l' encoding in ISO-8859-1 , ed \u00e8 da convertire in UTF-8 . Per scaricare la pagina, cambiarne l' encoding ed estrarre la tabella di interesse il comando pu\u00f2 essere curl \"http://www.sias.regione.sicilia.it/NHEOWLH140_00_1.html\" | \\ iconv -f ISO-8859-1 -t utf-8 | \\ scrape -be '//table[count(tr/td)>7]' L' utility usata sopra per fare la query XPATH \u00e8 scrape-cli . In output si ha una pagina web che contiene soltanto la tabella di interesse. Per passarla a VisiData bisogner\u00e0 modificare cos\u00ec lo script: curl \"http://www.sias.regione.sicilia.it/NHEOWLH140_00_1.html\" | \\ iconv -f ISO-8859-1 -t utf-8 | \\ scrape -be '//table[count(tr/td)>7]' | \\ vd -f html Come risultato si aprir\u00e0 la finestra di sotto. Per aprire la tabella sar\u00e0 necessario premere INVIO e poi si potr\u00e0 salvare la tabella in CSV (o altri formati) digitando CTRL+ s . Se si vuole inserire nello script anche la procedura di salvataggio, bisogna modificare lo script in questo modo: curl \"http://www.sias.regione.sicilia.it/NHEOWLH140_00_1.html\" | \\ iconv -f ISO-8859-1 -t utf-8 | \\ scrape -be '//table[count(tr/td)>7]' | \\ vd -b -f html -o out.csv -p dive.vd Note: -b \u00e8 per eseguire VisiData senza interfaccia; -p dive.vd per eseguire dei comandi (qui semplicemente l'apertura della tabella a partire dalla finestra iniziale di sopra). Nel file dive.vd c'\u00e8 il seguente contenuto. sheet col row longname input keystrokes comment open-file - o - 0 dive-row ^J Il file di sopra \u00e8 un file di log di VisiData (vedi sezione dedicata ). Tutte le operazioni fatte in VisiData finiscono in un log che pu\u00f2 essere visualizzato e salvato. Quindi \u00e8 possibile salvare la visualizzazione dell'elenco delle tabelle e poi l'apertura di quella di interesse. Per creare questo di sopra: arrivare a visualizzare la tabella su VisiData; digitare INVIO ; digitate SHIFT + d per visualizzare il log dei comandi; e infine CTRL + s per salvare il file dive.vd . Fare proposte e/o Chiedere supporto \u21b5 Il luogo dove farlo \u00e8 senz'altro questo https://github.com/saulpw/visidata/issues . \u00c8 bene farlo scrivendo sempre la versione di VisiData utilizzata, allegare i dati per replicare eventuali problemi riscontrati, documentare la procedura che si vuole realizzare. Note finali \u21b5 Il grande Jeremy Singer Vine lo usa da molto pi\u00f9 tempo di me e ha creato la migliore guida introduttiva dedicata in inglese https://jsvine.github.io/intro-to-visidata/ , di cui sono felice di essere nei ringraziamenti . Ne ho attinto a piene mani per scrivere questo post e colgo l'occasione per ringraziarlo di cuore pubblicamente. \u00c8 un'applicazione molto bella, che probabilmente per alcuni diverr\u00e0 (come \u00e8 adesso per me) di uso quotidiano. Jeremy afferma che per analisi complesse, analisi geospaziali, data literature \u00e8 meglio usare altro. Mi sembra sensato. Non sostituisce R o Pandas, ma li pu\u00f2 certamente affiancare e spesso precedere nel workflow di lavoro sui dati. \u00c8 un altro strumento che consiglio di aggiungere nella cassetta degli attrezzi. Lo sviluppatore principale e chi collabora con lui sono molto attenti alle richieste e alle proposte che vengono dall'esterno, in una bella mescolanza di sensibilit\u00e0 \"tecnologica\" e umana. In queste settimane ho aperto diverse issue a cui \u00e8 stato dato sempre riscontro. Alcune erano richieste da uomo primitivo, altre erano buone: confesso di essere orgoglioso di avere avuto degli effetti nel rilascio dell'ultima versione (la 1.5.1) e di essere citato pi\u00f9 volte nelle note di rilascio . Ringrazio molto Saul Pwanson e Anja Kefala . A breve gli proporr\u00f2 l'integrazione in lettura e scrittura dei datapackage , in modo da estendere la qualit\u00e0 e le modalit\u00e0 di lavoro su dati ben descritti e strutturati. ( fatto ) Qui vorremmo aggiornare e arricchire nel tempo i testi e si accettano anche proposte di integrazioni , correzioni e modifiche . URL consigliati \u21b5 la guida di Jeremy Singer Vine https://jsvine.github.io/intro-to-visidata/ le ricette sul sito ufficiale http://visidata.org/docs/ ; la documentazione ufficiale http://visidata.org/man/ ; la playlist YouTube a cura dell'autore https://www.youtube.com/playlist?list=PLxu7QdBkC7drrAGfYzatPGVHIpv4Et46W ; la lista visuale degli shortcut da tastiera http://visidata.org/docs/kblayout/ .","title":"README orig"},{"location":"README_orig/#visidata-il-coltellino-svizzero-per-i-dati-che-probabilmente-non-conosci","text":"VisiData \u00e8 un fantastico strumento open source per esplorare e manipolare dati. Mette insieme la chiarezza di un foglio di calcolo , con l'efficienza del terminale e la potenza di Python , in una utility leggera in grado di gestire milioni di righe con facilit\u00e0. La presentazione ufficiale fa un'ottima sintesi, ma non evidenzia la cosa che mi ha colpito di pi\u00f9: quella di Saul Pwanson (il creatore di VisiData) \u00e8 prima di ogni altra cosa una grande idea . Lo si capisce usandolo e spero che emerga anche dalle righe seguenti. Per usarlo non \u00e8 necessario essere uno sviluppatore ; se si conosce un po' Python, sar\u00e0 possibile usarlo in modo ancora pi\u00f9 sorprendente.","title":"VisiData: il coltellino svizzero per i dati, che probabilmente non conosci"},{"location":"README_orig/#perche-usarlo","text":"\u00c8 rapido , apre quasi istantaneamente file di diverse decine di megabyte ; \u00e8 agile , rende semplice la ricerca , il filtraggio , l' ordinamento ,il join e la ristrutturazione di dati tabellari; consente di avere in pochi passaggi una visione di insieme dei dataset su cui si vuole lavorare; apre molti dei formati tipici di testo strutturato (csv, tsv, xlsx , xls, json, xml, sqlite, shp, html, hdf5, xpt, sas7bdat, sav, dta) si utilizza soltanto da tastiera , ed \u00e8 possibile dimenticarsi del mouse; \u00e8 free ed open source . Apprezzo molto la sua rapidit\u00e0 e come offra in modo agile una visione di insieme sui dati. Questo, affiancato all'utilizzo da tastiera, lo rende un prodotto che d\u00e0 una marcia in pi\u00f9 a chi lo usa.","title":"Perch\u00e9 usarlo"},{"location":"README_orig/#supportarne-lo-sviluppo","text":"Se VisiData vi piacer\u00e0 e lo utilizzerete, sar\u00e0 cosa buona supportarne lo sviluppo con una donazione . Io ho deciso di farlo e di esserne un \"patrono\"! Si fa da qui https://www.patreon.com/saulpw .","title":"Supportarne lo sviluppo"},{"location":"README_orig/#come-si-installa","text":"Per gli sviluppatori, per chi usa la riga di comando, \u00e8 molto facile . \u00c8 scritto in Python 3 e di base basta usare l'installer di Python: pip3 install visidata Per tutti gli altri, bisogna prima installare Python 3 , poi aprire il terminale e lanciare il comando di sopra. Su Windows non c'\u00e8 ancora un supporto diretto. \u00c8 per\u00f2 utilizzabile da chi ha Windows 10: c'\u00e8 da installare il Windows Linux Subsystem ( decine di guide per farlo ), poi installare Python 3 nel sistema Linux e infine dare il comando di sopra dal terminale di Linux.","title":"Come si installa"},{"location":"README_orig/#cheat-sheet","text":"Abbiamo tradotto in italiano il cheat-sheet di VisiData, creato da Jeremy Singer Vine, disponibile in HTML e PDF .","title":"Cheat-sheet"},{"location":"README_orig/#la-versione-fronte-retro-a-cura-di-gianni-vitrano","text":"Gianni Vitrano di OpenDataSicilia a partire da questo cheat-sheet, ha creato la versione da stampare fronte retro a \"libretto\" . Grazie Gianni!","title":"La versione fronte retro a cura di Gianni Vitrano"},{"location":"README_orig/#10-modi-di-usare-visidata","text":"Dieci esempi rapidi , che mostrano cosa \u00e8 possibile fare con VisiData. \u00c8 una sezione a cura di Salvatore Fiandaca (grazie).","title":"10 Modi di usare Visidata"},{"location":"README_orig/#la-guida","text":"VisiData \u00e8 un foglio elettronico a riga di comando . Potrebbe suonare come una contraddizione, perch\u00e9 si accosta qualcosa con interfaccia ricca (come un foglio elettronico) a qualcosa di visualmente molto minimale. In realt\u00e0 questa \u00e8 una delle idee forti di questa applicazione, che prende il meglio di questi due mondi: l'approccio a griglia e multi tabella del primo, e la rapidit\u00e0, l'immediatezza, l'essere easy e \"subito pronto\" di un terminale. Di base quindi bisogna prima aprire il terminale. Poi per aprire un file basta scrivere un comando con questa struttura: vd nomeFile.csv A seguire soltanto un piccolo estratto sul come usarlo. Per approfondire ho creato un elenco di URL consigliati . VisiData si usa al 99% con la tastiera, quindi \u00e8 bene che il Caps Lock non sia attivo: gli shortcut da tastiera non funzionerebbero correttamente (grazie Salvatore Fiandaca per la nota).","title":"La guida"},{"location":"README_orig/#un-esempio-di-apertura-di-un-file-grande","text":"\"Grande\" in informatica non vuol dire niente, \u00e8 come \"salato\" con un piatto di pasta. Un CSV grande per il mio PC (un notebook del 2015, con processore i7 e 8 GB di RAM) - se voglio lavorarci in modo \"visuale\" con un foglio elettronico - potrebbe essere gi\u00e0 un CSV da 500000 righe, che mi si apre dopo 1 minuto e 15 secondi e dove un \"trova e sostituisci\" diventa operazione molto lunga (uso LibreOffice Calc). Ci sono anche limiti che non sono personali. Se per esempio provassi a lavorare con uno dei dataset del \" Parco Circolante dei veicoli \" in Italia scoprirei dei limiti strumentali. Un esempio con i dati dell' Abruzzo : con il comando da shell wc -l parco_circolante_Abruzzo.csv leggo che \u00e8 composto da 1170439 righe. Con una regione \"piccola\" come questa si va gi\u00e0 oltre il limite di Calc, che \u00e8 di 1048576 righe. Se voglio comunque visualizzare 1048576 righe di questo dataset, sul mio PC sono necessari circa 5 minuti . Con VisiData lancio vd parco_circolante_Abruzzo.csv e lo visualizzo in 1 secondo . C'\u00e8 il \"trucco\", che \u00e8 invero una delle buone scelte del progettista: il file viene aperto in modo asincrono, caricandone subito una porzione navigabile. In basso a destra (vedi sotto) viene dato conto della percentuale di avanzamento che porter\u00e0 alla piena apertura (meno di 15 secondi). Questo essere \"subito pronto\" lo rende uno strumento di grande comodit\u00e0, che l'ha portato a essere uno dei miei quotidiani. Ribadisco per\u00f2 ancora un volta che il \"grande\" e la valutazione del tempo dipendono dagli obiettivi che si hanno, dalle proprie conoscenze di base e dall' hardware/software che si ha a disposizione. Per chiudere la tabella aperta e Visidata si pigia q sulla tastiera. NOTA BENE : questo file con i dati sul \"Parco Circolante dei veicoli\" in Abruzzo, verr\u00e0 usato in questa guida come dataset di base. Ne ho pertanto creato una copia di backup qui .","title":"Un esempio di apertura di un file grande"},{"location":"README_orig/#navigare-tra-i-dati","text":"Per muoversi tra le celle si usano le 4 frecce direzionali dalla tastiera o (come vim, da cui nell'uso da tastiera VisiData prende molta ispirazione) h , j , k , l . Per muoversi in modo pi\u00f9 esteso: g + freccia in basso oppure gj , per andare all'ultima riga; g + freccia in alto oppure gk , per andare alla prima riga; g + freccia a sinistra oppure gh , per andare alla colonna pi\u00f9 a sinistra; g + freccia a destra oppure gl , per andare alla colonna pi\u00f9 a destra; PageDown oppure Control + Shift + f , una pagina in gi\u00f9; PageUp oppure Control + Shift + b , una pagina in alto. NOTA BENE : g \u00e8 il tasto per i comandi \"globali\". Per muoversi tramite ricerca testuale, sfruttando le espressioni regolari: / + regex , cerca in avanti nella colonna corrente; ? + regex , cerca indietro nella colonna corrente; g/ + regex , cerca in avanti in tutte le colonne; g? + regex , cerca indietro in tutte le colonne; Con n e N si va avanti e indietro rispetto agli elementi di output del risultato della ricerca. Infine per saltare a una determinata riga o colonna, rispettivamente zr e zc seguito dal numero di riga e colonna (la numerazione inizia da zero).","title":"Navigare tra i dati"},{"location":"README_orig/#i-fogli","text":"In VisiData ci sono tre tipi di fogli: i fogli sorgente, con i dati che si \u00e8 scelto di aprire con VisiData; i fogli derivati, come quelli derivanti da filtraggio o la tabelle con le frequenze (vedi sotto); i metafogli, che descrivono e definiscono i dataset caricati (come quello che descrive ad esempio le colonne di una tabella, o il \"foglio dei fogli\"). Il \"foglio dei fogli\" si apre con Shift + s e fornisce l'elenco (e alcune informazioni correlate) di tutti i fogli aperti. Selezionandone uno e pigiando Invio , quest'ultimo si aprir\u00e0. Per rinominarne uno dal \"foglio dei fogli\", basta selezionarlo, premere e e inserire il nuovo nome e poi dare Invio . O in alternativa, se si \u00e8 davanti al foglio che si vuole rinominare, premere la barra spaziatrice , scrivere rename-sheet , digitare il nuovo nome e infine pigiare su Invio . Il foglio correntemente aperto si chiude con q .","title":"I fogli"},{"location":"README_orig/#lavorare-sulle-righe","text":"La cosa pi\u00f9 importante da comprendere \u00e8 come selezionarle e deselezionarle, perch\u00e9 molte delle operazioni vengono eseguite proprio su quelle selezionate. I tasti principali di selezione sono: s , per selezionare la riga corrente; u , per deselezionare la riga corrente; t , per invertire la selezione della riga corrente; gs , per selezionare tutte le righe; gu , per deselezionare tutte le righe; gt , per invertire i criteri di selezione per tutte le righe.","title":"Lavorare sulle righe"},{"location":"README_orig/#selezione-di-righe-tramite-espressione-regolare","text":"| + termine da ricercare , seleziona tutte le righe in cui c'\u00e8 corrispondenza per la colonna corrente; \\ + termine da ricercare , deseleziona tutte le righe in cui c'\u00e8 corrispondenza per la colonna corrente; g| + termine da ricercare , seleziona tutte le righe in cui c'\u00e8 corrispondenza per una qualsiasi colonna; g\\ + termine da ricercare , deseleziona tutte le righe in cui c'\u00e8 corrispondenza per una qualsiasi colonna; , , dato il valore della cella selezionata, seleziona tutte le righe in cui per la colonna corrente c'\u00e8 corrispondenza; g, , seleziona tutte le righe uguali a quelle corrente. Se ad esempio: ci si sposta nella colonna provincia_residenza poi si pigia | ; si digita TERAMO ; si preme Invio . ... si ottiene qualcosa come quella di sotto.","title":"Selezione di righe tramite espressione regolare"},{"location":"README_orig/#selezione-di-righe-tramite-espressioni-python","text":"\u00c8 possibile fare una selezione di righe tramite un'espressione di Python ( qui per approfondire sui concetti di base delle espressioni). I comandi da tastiera sono: z| , per selezionare tutte le righe in cui l'espressione \u00e8 valida; z\\ , per deselezionare tutte le righe in cui l'espressione \u00e8 valida. Ad esempio seguendo questi step: gu , per deselezionare tutto; z| , per attivare la selezione tramite espressione Python; scrivendo provincia_residenza == \"PESCARA\" and sesso == \"F\" ; e pigiando su Invio . ... verranno selezionati tutti gli elementi in cui la provincia \u00e8 \"Pescara\" ed il sesso \u00e8 \"F\".","title":"Selezione di righe tramite espressioni Python"},{"location":"README_orig/#selezione-di-righe-tramite-espressioni-python-e-regex","text":"si digita z| ; si scrive l'espressione, come ad esempio re.search(\"^1\", FieldB) and re.search(\"^2\", FieldA) , ovvero tutte le righe in cui il campo FieldB inizia per 1 e il campo FieldA per 2 .","title":"Selezione di righe tramite espressioni Python e regex"},{"location":"README_orig/#selezionare-un-numero-random-di-righe","text":"aprire una tabella; fare click sulla barra spaziatrice; scrivere random-rows (si pu\u00f2 scrivere anche soltanto ad esempio ran e autocompletare con TAB ) e premere INVIO ; scrivere il numero di righe random che si vogliono selezionare.","title":"Selezionare un numero random di righe"},{"location":"README_orig/#spostare-righe","text":"Si fa con queste combinazioni: Shift+j , per spostare la riga corrente verso il basso; Shift+k , per spostare la riga corrente verso l'alto.","title":"Spostare righe"},{"location":"README_orig/#cancellare-righe","text":"d per cancellare la riga corrente; gd per cancellare le righe selezionate.","title":"Cancellare righe"},{"location":"README_orig/#modificare-il-contenuto","text":"Questi i comandi di base: e , per modificare la cella corrente; Enter , per chiudere la modifica; Control+c , per cancellare la modifica; Control+a , per andare a inizio linea; Control+e , per andare a fine linea; Control+k , per cancellare il contenuto a partire dalla posizione del cursore.","title":"Modificare il contenuto"},{"location":"README_orig/#lavorare-sulle-colonne","text":"Ogni colonna in VisiData ha 3 attributi principali: Name , il nome della colonna; Width , la larghezza a schermo della colonna (se impostata a 0, la colonna diventa invisibile); Type , per definire se contiene testi, numeri interi, numeri decimali, monete o date.","title":"Lavorare sulle colonne"},{"location":"README_orig/#il-foglio-delle-colonne","text":"In VisiData esistono i cosiddetti meta-fogli (vedi sopra ): uno di questi \u00e8 il foglio delle colonne, che elenca tutte le colonne e i relativi attributi di una tabella. A partire dalla visualizzazione di una tabella, si apre con Shift+c . \u00c8 una delle caratteristiche di VisiData che consente una rapida prima lettura del dato, che personalmente uso anche ad esempio per costruire brevi relazioni che contengono schema dati.","title":"Il foglio delle colonne"},{"location":"README_orig/#impostare-il-tipo-di-campo","text":"Come impostazione predefinita VisiData imposta a \"testo\" la tipologia di tutti i campi (che \u00e8 quello che faccio di solito anche io alla prima apertura sia in un foglio elettronico che in Pandas). Per definire il tipo di campo di una colonna della tabella che si sta visualizzando (cosa che consente di fare correttamente ad esempio operazioni di ordinamento, matematiche, ecc.), si deve navigare sino alla colonna su cui si vuole intervenire e poi pigiare: # , per definire un campo con numeri interi (0, -1, 5000000) % , per definire un campo con numeri decimali (0.5, -3.14, 23.45557) $ , per definire un campo con monete ($4.99, \u20ac20) @ , per definire un campo con date (2018-04-06, April 6, 2018, 04/06/2018) ~ , per definire un campo di testo (qualsiasi cosa!)","title":"Impostare il tipo di campo"},{"location":"README_orig/#impostare-numero-di-decimali-in-un-campo-floating","text":"Di default i campi floating sono renderizzati con due decimali (la formattazione \u00e8 impostata come %.02f ). Per modificare la cosa si pu\u00f2 aprire il foglio delle colonne ( SHIFT+c ) e modificare il valore di formattazione delle colonna fmtstr (vedi sotto). Per passare a tre decimali per un campo, baster\u00e0 ad esempio modificare la cella della colonna di interesse da %.02f a %.03f (in edit di cella si va con il tasto e ). Se si vuole fare su pi\u00f9 colonne: si apre sempre il foglio delle colonne; si selezionano le colonne di cui si vuole cambiare la formattazione; si va sulla colonna fmtstr ; si va in modifica globale con ge e si inserisce il valore di formattazione desiderato; si preme INVIO per applicare la modifica.","title":"Impostare numero di decimali in un campo floating"},{"location":"README_orig/#impostare-formato-data-personalizzato","text":"Se una cella contiene ad esempio la data 06/11/2020 (qui come 6 novembre 2020), e imposto la colonna come data con il tasto @ , visidata la interpreta come 2020-06-11 , ovvero come 11 giugno. Per impostarla correttamente bisogna impostare un formato data personalizzato: si va sulla colonna con le date; si digita z@ e si preme INVIO ; si imposta il formato - in questo caso %d/%m/%Y - e si preme INVIO . In output si avr\u00e0 2020-11-06 .","title":"Impostare formato data personalizzato"},{"location":"README_orig/#rinominare-le-colonne","text":"Per farlo si naviga sino alla colonna che si vuole rinominare e poi: si pigia ^ ; si digita il nome che si vuole assegnare; si pigia Invio .","title":"Rinominare le colonne"},{"location":"README_orig/#rinominare-le-colonne-in-blocco","text":"Pu\u00f2 essere utile ad esempio anteporre dei caratteri a tutte le colonne che iniziano per t . Questi i passi: si apre il foglio colonne con shift + c ; si va nella colonna con il nome delle colonne (\u00e8 la prima); si digita | , si scrive ^t e si pigia INVIO (saranno selezionate tutte le colonne che iniziano con il carattere t ); si pigia g* , per attivare il trova e sostituisci via regex ; si scrive ^(t.+)/TR_\\1 e poi INVIO . Tutte le colonne che iniziano per t , avranno un nuovo nome corrispondente al precedente, con TR_ come prefisso. La colonna tabacco , diventerebbe ad esempio TR_tabacco .","title":"Rinominare le colonne in blocco"},{"location":"README_orig/#come-espandere-ridurre-e-rimuovere-colonne","text":"Questi gli shortcut: _ , per espandere la larghezza della colonna corrente, alla larghezza massima del testo contenuto nella stessa, tenendo conto delle righe visualizzate a schermo; g_ , per espandere la larghezza di tutte le colonne, alla larghezza massima del testo contenuto, tenendo conto delle righe visualizzate a schermo; z_ + n , per impostare la larghezza della colonna corrente a n caratteri; - , per nascondere la colonna corrente (viene impostata a 0 la sua larghezza); gv , per scoprire tutte le colonne nascoste; z- , per ridurre la larghezza della colonna corrente alla sua met\u00e0.","title":"Come espandere, ridurre e rimuovere colonne"},{"location":"README_orig/#spostare-una-colonna","text":"Ecco come farlo: Shift+h , sposta la colonna corrente di una posizione a sinistra; Shift+l , sposta la colonna corrente di una posizione a destra.","title":"Spostare una colonna"},{"location":"README_orig/#modificare-una-colonna-tramite-unespressione-python","text":"A questa tabella si vuole assegnare al campo FieldA il valore di FieldB , tutte le volte che FieldA \u00e8 vuoto. FieldA FieldB 1 3 1 12 Questa la procedura: gs per selezionare tutte le righe; g= per scrivere l'espressione Python; aggiungere come espressione FieldB if FieldA==\"\" else FieldA . Ovvero ( FieldA ) \u00e8 uguale FieldB se FieldA non contiene nulla, altrimenti \u00e8 uguale a se stesso (rimane invariato).","title":"Modificare una colonna tramite un'espressione Python"},{"location":"README_orig/#calcoli-per-colonna","text":"\u00c8 possibile avere restituito, per una colonna, il risultato di uno dei calcoli di aggregazione disponibili: Ad esempio per avere la somma dei valori di una colonna con numeri interi: si imposta il tipo di colonna a numero intero (con # ); si digita z+ e poi INVIO ; si digita sum e poi INVIO . In basso, si legger\u00e0 il valore risultante. NOTA BENE : se nessuna riga \u00e8 selezionata si avr\u00e0 il totale per colonna, altrimenti il calcolo sar\u00e0 applicato per colonna alle sole righe selezionate.","title":"Calcoli per colonna"},{"location":"README_orig/#come-definire-una-colonna-chiave","text":"Per ogni foglio \u00e8 possibile definire una o pi\u00f9 colonne chiave. Hanno due funzioni principali: rimangono fissate sul lato sinistro, quando si naviga orizzontalmente sulla tabella; hanno una funzione speciale quando si fanno certe operazioni (come quelle di JOIN , per alcuni conteggi, ecc.). Per definire una colonna chiave (e vice-versa) si naviga sino alla colonna di interesse e si pigia ! .","title":"Come definire una colonna chiave"},{"location":"README_orig/#manipolare-le-colonne-dal-foglio-delle-colonne","text":"Il foglio delle colonne oltre a dare una visione di insieme, consente di fare delle rapide modifiche in blocco. \u00c8 possibile spostare le colonne con Shift+j e Shift+k , rinominarle con e , impostare il tipo per tutte quelle selezionate, impostare la larghezza per tutte quelle selezionate. Ad esempio a partire dal Parco Circolante dei veicoli dell'Abruzzo, il foglio colonne ( Shift+c ) appare in questo modo. Se si vuole impostare a \"numero intero\" le colonne progressivo e eta_intestatario , bisogner\u00e0 prima selezionarle con s . Poi premere g# .","title":"Manipolare le colonne dal foglio delle colonne"},{"location":"README_orig/#creare-una-nuova-colonna","text":"Sono tre le modalit\u00e0 pi\u00f9 comode: come risultato di un'espressione Python; come risultato di un comando di split ; come risultato di estrazione di una porzione di testo da una colonna.","title":"Creare una nuova colonna"},{"location":"README_orig/#nuova-colonna-tramite-espressione","text":"Ad esempio potrebbe essere utile creare una colonna vero/falso, per tutte le auto del Parco Circolante dei veicoli dell'Abruzzo, con cilindrata maggiore ai 643 (\u00e8 un numero a caso). Per farlo: navigare sino alla colonna cilindrata ; premere % per impostarla come numero decimale; pigiare su = ; nel prompt in basso a sinistra scrivere cilindrata > 643 ; premere Invio . In output qualcosa come quella di sotto, con la nuova colonna risultato di un'espressione Python.","title":"Nuova colonna tramite espressione"},{"location":"README_orig/#nuove-colonne-come-risultato-di-splitting","text":"Si possono creare nuove colonne, come risultato di una suddivisione di una gi\u00e0 esistente. Ad esempio nel campo data_immatricolazione \u00e8 contenuta sia la data che l'orario, separati da spazio (i.e. 1995-04-03 00:00:00 ). Se si vuole suddividerla in due colonne (data e orario), si pu\u00f2 procedere in questo modo: si naviga sino alla colonna data_immatricolazione ; si preme : ; si sceglie la stringa di testo (definibile anche come espressione regolare) da usare come separatore e si scrive in basso a sinistra nel prompt . In questo caso \u00e8 lo spazio; si digita quindi lo spazio e si d\u00e0 Invio . Come output si avr\u00e0 qualcosa come quella di sotto: due colonne frutto della divisione in pi\u00f9 colonne, sfruttando come separatore lo spazio.","title":"Nuove colonne come risultato di splitting"},{"location":"README_orig/#nuove-colonne-come-risultato-di-cattura-e-estrazione","text":"Per farlo ci vogliono delle conoscenze di base sulle espressioni regolari (che sono una conoscenza propedeutica per chiunque lavori con i dati). Se si vuole ad esempio estrarre l'anno dalla celle che contiene il valore 1995-04-03 00:00:00 , baster\u00e0 definire l'espressione regolare che estrae a partire dall'inizio della cella i primi 4 numeri. Che in termini di espressione regolare \u00e8 ^[0-9]{4} . Per creare una nuova colonna a partire dalla definizione di un'espressione regolare da usare come \"estrattore\", si procede in questo modo: si naviga sulla colonna data_immatricolazione ; si pigia ; ; si scrive nel prompt in basso a sinistra ^([0-9]{4}) . Sono state inserite le parentesi tonde, perch\u00e9 la cattura si fa a partire dalla definizione di un gruppo; si pigia Invio . E si ottiene qualcosa come quella di sotto:","title":"Nuove colonne come risultato di cattura e estrazione"},{"location":"README_orig/#trasformare-una-colonna-tramite-espressione-regolare-trova-e-sostituisci","text":"Su ogni colonna \u00e8 possibile fare delle trasformazioni basate su espressioni regolari. Se ad esempio si vogliono rimuovere dalle celle della colonna data_immatricolazione le informazioni sull'orario e passare quindi da 1995-04-03 00:00:00 a 1995-04-03 si pu\u00f2 procedere in questo modo: si selezionano le righe su cui si vuole fare questa trasformazione (se sono tutte il comando \u00e8 gs ); si va nella colonna data_immatricolazione ; si pigia su g* ; si scrive nel prompt .*$/ . Il simbolo / in VisiData separa ci\u00f2 che si cerca, da ci\u00f2 con cui si vuole sostituire. Qui si cerca uno spazio ( ), seguito da qualsiasi carattere sino a fine cella ( .*$ ), e si vuole sostituire con nulla; si pigia Invio (ci vorr\u00e0 un po' di tempo, sono pi\u00f9 di un milione di righe). Il risultato sar\u00e0 qualcosa come quella di sotto: Questo \u00e8 un \"trova e sostituisci\" per colonna.","title":"Trasformare una colonna tramite espressione regolare (trova e sostituisci)"},{"location":"README_orig/#il-foglio-delle-frequenze","text":"Questa \u00e8 una delle funzioni che uso di pi\u00f9 ed \u00e8 un'altra gran bell'idea. A partire da una colonna (o dalla combinazione di pi\u00f9 d'una) \u00e8 possibile - con Shift+f - aprire un foglio derivato, che contiene dei dati relativi al conteggio per valori distinti di quanto contenuto in quella colonna. Se per esempio a partire dal Parco Circolante dei veicoli dell'Abruzzo, si volesse avere un'idea sulla distribuzione per \"marca\", basta navigare in vista tabella sino a quella colonna e poi pigiare Shift+f e avere qualcosa come quella di sotto. I dati sono ordinati per conteggio ed emerge subito come una famosa marca nazionale da sola faccia \u00bc del campione. Cos\u00ec come emerge che c'\u00e8 un 5% di elementi in cui la marca non \u00e8 definita e anche questa \u00e8 un'informazione che ci potrebbe consentire da subito di prendere delle decisioni. Molto comoda anche la colonna histogram che da visivamente in modo molto diretto un'idea del rapporto tra i numeri descritti in tabella.","title":"Il foglio delle frequenze"},{"location":"README_orig/#lavorare-sulle-celle","text":"","title":"Lavorare sulle celle"},{"location":"README_orig/#fare-un-trova-e-sostituisci-globale","text":"Si parte dal selezionare le righe su cui si vuole eseguire l'operazione (se sono tutte il comando \u00e8 gs ). Digitare gz* e poi scrivere stringa da trovare / stringa da sostituire e dare INVIO . Se ad esempio volessi sostituire la stringa pal con mis , dovrei scrivere pal/mis . \u00c8 possibile usare anche le espressioni regolari.","title":"Fare un trova e sostituisci globale"},{"location":"README_orig/#ordinare-e-filtrare","text":"","title":"Ordinare e filtrare"},{"location":"README_orig/#ordinare-righe","text":"I tasti [ e ] ordinano i dati rispettivamente in modo crescente e decrescente, a partire dalla colonna attiva.","title":"Ordinare righe"},{"location":"README_orig/#filtrare-righe","text":"\u00c8 possibile estrarre in vari modi un campione delle righe della tabella visualizzata. Quello di base \u00e8 a partire dalla selezione delle righe (in uno dei modi visti sopra) e poi pigiare \" . Ad esempio si naviga sino alla colonna marca , si preme | , si scrive chevr , si pigia Invio (vengono selezionati tutti i record associati a CHEVROLET ) e infine si preme \" . Si avr\u00e0 una tabella filtrata, con gli 8814 record relativi a questa marca per l'Abruzzo. Oppure posso farlo a partire da un \"foglio delle frequenze\" (vedi qui ): si naviga sino alla colonna marca ; si pigia Shift+f , che mi da in output il conteggio dei valori distinti per marca (sono pi\u00f9 di un milione di record, ci vorr\u00e0 un po' di tempo); si scorre sino alla riga che contiene la marca che si vuole filtrare; si pigia Invio e si avr\u00e0 una tabella filtrata, con i record relativi a quella marca per l'Abruzzo. Dal foglio delle frequenze \u00e8 possibile filtrare su pi\u00f9 di un elemento: si selezionano ad esempio tre marche, pigiando s per ognuna; si chiude il foglio delle frequenze con q e si torna al foglio dati; si pigia \" e si ottiene una tabella filtrata con i dati relativi alle sole tre marche selezionate prima.","title":"Filtrare righe"},{"location":"README_orig/#filtro-tramite-espressione-python","text":"\u00c8 possibile filtrare righe tramite un' espressione Python ( qui la documentazione ufficiale e qui una guida che consiglio). Se ad esempio dalla tabella di sotto si volessero soltanto le province con pi\u00f9 di 350.000 abitanti basterebbe: per prima cosa impostare il campo Popolazione come numerico, pigiando # ; pigiare z| per attivare il filtro tramite espressione Python; scrivere l'espressione basata sulla colonna, che qui \u00e8 Popolazione>350000 e poi premere INVIO . In output si avr\u00e0 la selezione di tutte le righe che risolvono l'espressione scritta. Note: nel filtro per espressione c'\u00e8 l'autocompletamento del nome colonna, quindi se si scrive ad esempio Pop e poi si fa click su TAB , viene restituito a schermo Popolazione ; \u00e8 possibile scrivere espressioni complesse, che fanno riferimento a pi\u00f9 colonne.","title":"Filtro tramite espressione Python"},{"location":"README_orig/#filtro-tramite-espressione-python-su-campo-datetime","text":"\u00c8 possibile filtrare righe tramite un'espressione Python a partire da campi datetime , dopo averli impostare come data. Usando questo file CSV (by PCM-DPC ), se ad esempio dalla tabella di sotto si volessero soltanto i record con giorno 29: basterebbe: per prima cosa impostare il campo data come data, pigiando @ ; pigiare z| per attivare il filtro tramite espressione Python; scrivere l'espressione basata sulla colonna, che qui \u00e8 data.day == 29 e poi premere INVIO . In output si avr\u00e0 la selezione di tutte le righe che risolvono l'espressione scritta. Osservazioni: oltre a day \u00e8 possibile usare: month , year e hour Se si vogliono ad esempio selezionare soltanto righe con date nel futuro, l'espressione sar\u00e0 data > datetime.datetime.now() .","title":"Filtro tramite espressione Python su campo datetime"},{"location":"README_orig/#filtri-tramite-espressioni-python-basati-su-piu-colonne","text":"Si vogliono ad esempio selezionare tutte le righe in cui il domicilio non \u00e8 n\u00e9 a Palermo, n\u00e9 a Ragusa, ma la cui residenza \u00e8 in una di queste due citt\u00e0. A partire ad esempio da: domicilio residenza PA PA RG RG TO TO VE PA Questa la procedura: pigiare z| per selezionare tramite espressione Python; scrivere re.search(\"^(?!PA|RG).*\", domicilio) and re.search(\"(PA|RG)\", residenza) ; premere INVIO . La prima \u00e8 una speciale condizione di regex , che cerca al negativo. Sar\u00e0 selezionata soltanto la riga seguente: domicilio residenza VE PA","title":"Filtri tramite espressioni python, basati su pi\u00f9 colonne"},{"location":"README_orig/#riepilogo-dei-dati","text":"Uno dei modi per avere un riepilogo \u00e8 usare il foglio delle frequenze (vedi qui ). \u00c8 possibile generare un foglio delle frequenze anche basato su pi\u00f9 colonne. Per farlo si impostano come colonne chiave ( qui come fare) quelle che si vogliono trasformare in \"foglio delle frequenze\", e poi si pigia g+Shift+f . Qui sotto ad esempio un riepilogo per le coppie univoche di destinazione/alimentazione .","title":"Riepilogo dei dati"},{"location":"README_orig/#aggiunta-di-aggregatori","text":"I fogli di frequenza, oltre al conteggio per valori distinti, possono contenere altri calcoli. Gli \"aggregatori\" possibili sono min , max , avg / mean , median , q3/q4/q5/q10 (terzili/quartili/quintili/decili), sum , distinct , count e keymax . Ad esempio per ogni provincia si pu\u00f2 avere restituito la distribuzione di et\u00e0 per quartile e scoprire che il 50% del campione \u00e8 compreso nella fascia di et\u00e0 tra i 18 e circa i 55 anni. Per aggiungere l'aggregatore q4 al foglio delle frequenze, bisogna seguire questi passi: navigare sino alla colonna eta_intestatario e impostarla a numero intero con # ; premere + e scrivere (in basso a sinistra) q4 (per il calcolo dei quartili, quindi al 25, 50 e 75 percento); navigare sino alla colonna provincia_residenza e pigiare Shift+f . Inizier\u00e0 da subito il calcolo (che non \u00e8 immediato, sono pi\u00f9 di un milione di righe) e alla fine si avr\u00e0 qualcosa come l'immagine di sopra (non \u00e8 fico VisiData?).","title":"Aggiunta di aggregatori"},{"location":"README_orig/#il-riepilogo-globale","text":"Per avere una visione a \"volo d'uccello\" sull'intera tabella esiste il comando Shift+i , che restituisce un riepilogo statistico per tutte le colonne. Se prima di lanciarlo si definiscono correttamente i campi (ad esempio i numerici, come numerici), verranno eseguiti correttamente anche i calcoli per min , max , median , mean , stdev . Questa \u00e8 un'altra feature di grande comodit\u00e0 (presente in molte applicazione e ambienti per analisi dati), che verr\u00e0 usata molto da chi lavorer\u00e0 con VisiData.","title":"Il riepilogo globale"},{"location":"README_orig/#salvare-un-foglio","text":"Per salvare un foglio si preme CTRL+s , poi si scrive il nome del file con estensione ( nomeEsempio.csv ) e infine si pigia Invio .","title":"Salvare un foglio"},{"location":"README_orig/#fare-il-redirect-delloutput-verso-lo-stdout","text":"Il comando vd input.csv -b --save-filetype json | jq . invier\u00e0 ad esempio a jq un output JSON a partire dal CSV di input . Se ad esempio si vuole passare l'output a grep: vd input.csv -b --save-filetype tsv 2> /dev/null | grep 'a' 2> /dev/null per non avere stderr a schermo.","title":"Fare il redirect dell'output verso lo stdout"},{"location":"README_orig/#fare-join-tra-tabelle","text":"Se ad esempio si volesse calcolare il rapporto tra numero di mezzi e popolazione, sarebbe utile fare un JOIN con una tabella con i dati della popolazione residente. I dati per provincia sono quelli di sotto e sono stati salvati in un file TSV denominato popolazioneAbruzzo.tsv (fonte ISTAT ). Provincia Popolazione L'AQUILA 300404 TERAMO 308284 PESCARA 319388 CHIETI 387120 Si pu\u00f2 fare in questo modo: si parte da vd parco_circolante_Abruzzo.csv ; si va sulla colonna provincia_residenza ; si calcola il foglio delle frequenze pigiando Shift+f e si ottiene si rinomina questo foglio frequenze premendo la barra spaziatrice, scrivendo il comando rename-sheet e dando poi Invio . E poi inserendo il nome nuovo (ad esempio mezziProvincia ); si apre la tabella con i dati sulla popolazione per provincia, pigiando o , scrivendo popolazioneAbruzzo.tsv (che \u00e8 il nome del file) e pigiando Invio (NOTA BENE si pu\u00f2 scrivere anche soltanto popo e poi pigiare TAB e il nome del file verr\u00e0 autocompletato). Si otterr\u00e0 si va nella colonna Provincia e si preme ! per impostarla come colonna chiave. Il JOIN in VisiData viene fatto tra colonne chiave; si apre il \"foglio dei fogli\" con Shift+s e si visualizzer\u00e0 qualcosa come; si va nella riga che contiene lo sheet popolazioneAbruzzo e si pigia INVIO ; si va di nuovo nella colonna Provincia e si preme ! per impostarla come colonna chiave; si apre il \"foglio dei fogli\" con Shift+s ; si selezionano con s le due tabelle mezziProvincia e popolazioneAbruzzo ; si pigia & che \u00e8 il comando di JOIN e in basso a sinistra ci viene chiesto quale tipo si vuole applicare ( nota bene : con VisiData >2.0 si deve premere CTRL + x e scegliere il tipo di JOIN ); si scrive inner e si pigia Invio e si ottiene una tabella che contiene sia il numero di mezzi per provincia, che il numero di abitanti. Da questa tabella a questo punto, semplificando un po', si potrebbe rapidamente calcolare il numero macchine per persona, in questo modo: si va nella colonna Popolazione e si preme # per impostarla come numero intero; si pigia = (per creare una nuova colonna con valori frutto di un'espressione); si scrive poi nel prompt count/Popolazione (c'\u00e8 l'autocompletamento con TAB dei nomi delle colonne); e si ottiene un risultato come quello di sotto.","title":"Fare JOIN tra tabelle"},{"location":"README_orig/#concatenare-tabelle","text":"La concatenazione tra due o pi\u00f9 tabelle con la stessa struttura si attiva tramite & . Ad esempio, a partire dai due file inputFileOne.csv e inputFileTwo.csv , presenti qui si procede in questo modo: si apre la shell e si va nella cartella che contiene i file da concatenare; si scrive vd e si preme Invio ; si seleziona la prima voce DirSheet for the current directory e si preme invio ; si selezionano con s i due file; si preme g Invio per aprirli entrambi; si apre il foglio dei fogli con Shift+s ; si selezionano inputFileOne.csv e inputFileTwo.csv con s ; si preme & per attivare la concatenazione; si preme Ctrl+X per il menu; si seleziona append e poi si preme Invio . Si avr\u00e0 a video l'unione dei due file di input (in questo video una replica di quanto descritto, per versioni vd < 2 ).","title":"Concatenare tabelle"},{"location":"README_orig/#tabelle-pivot","text":"Ecco ad esempio come creare quella che da conto del numero di mezzi per marca, suddivisi per provincia: si va nella colonna marca e si imposta come colonna chiave, premendo ! ; si va poi nella colonna provincia_residenza e si pigia Shift+w ; si ottiene la tabella pivot desiderata. Se invece del conteggio delle occorrenze si volesse (a partire da un altro campo) calcolare un altro dato aggregato - come ad esempio l'et\u00e0 media per marca e provincia - si pu\u00f2 procedere in questo modo: si va nella colonna eta_intestatario e si imposta a numero intero, pigiando su # ; si preme + , poi in basso a sinistra nel prompt si scrive avg e infine si d\u00e0 Invio ; si va di nuovo nella colonna provincia_residenza e si pigia Shift+w . In output, per ogni provincia, si avr\u00e0 quindi la media desiderata.","title":"Tabelle Pivot"},{"location":"README_orig/#creare-un-grafico-di-dispersione-scatter-plot","text":"VisiData pu\u00f2 stampare a schermo anche dei grafici XY. Non \u00e8 un suo punto di forza, ma pu\u00f2 essere utile per avere una prima e grezza visualizzazione spaziale dell'insieme dei dati. Il requisito per crearne uno, \u00e8 avere due colonne numeriche, da usare come coppia di coordinate. Qualcosa come quella di sotto. fid X Y 1 12.29 43.76 2 12.16 43.64 3 12.15 43.65 4 12.16 43.63 ... ... ... Per generare il grafico baster\u00e0 seguire i seguenti passi: impostare come numeriche (numeri decimali digitando % sulla colonna, o # per numeri interi) le due colonne con le coordinate; impostare come colonna chiave la colonna con le ascisse, selezionandola e digitando ! ; selezionare la colonna con le ordinate e digitare . . In output si avr\u00e0 qualcosa come quella di sotto","title":"Creare un grafico di dispersione (scatter plot)"},{"location":"README_orig/#moduli-python","text":"VisiData \u00e8 un foglio elettronico basato su Python 3. Questo consente di utilizzare al suo interno la galassia dei moduli disponibili per Python. Per farlo, bisogna precaricare questi moduli all'avvio di VisiData. Questo si realizza modificando il file di configurazione del programma - si chiama .visidatarc - contenuto nella cartella home dell'utente. Se si vuole ad esempio sfruttare il modulo datetime , si apre in modifica il file .visidatarc e si aggiunge la riga from datetime import datetime Poi si salva il file e si fa partire VisiData. Se ad esempio si vuole fare un'analisi sulla data di immatricolazione per mese a partire dalla colonna data_immatricolazione e si volesse sfruttare il modulo datetime , si pu\u00f2 procedere in questo modo: si va nella colonna data_immatricolazione ; si preme = ; si scrive nel prompt datetime.strptime(data_immatricolazione, '%Y-%m-%d %H:%M:%S').month e si pigia Invio . Si ottiene qualcosa come quella di sotto: E a questo punto si pu\u00f2 rinominare la colonna premendo ^ , scrivendo \"mese\" e poi premendo Invio . E poi creare il foglio delle frequenze della colonna mese , pigiando Shift+f e scoprire che in Abruzzo si immatricola soprattutto a gennaio. NOTA BENE : le funzioni del modulo datetime sono disponibili in modo nativo per le colonne gi\u00e0 impostate (come tipo) a data. Quanto scritto sopra vale soprattutto come guida al come precaricare e utilizzare un modulo Python in VisiData.","title":"Moduli Python"},{"location":"README_orig/#salvare-un-flusso-di-lavoro","text":"","title":"Salvare un flusso di lavoro"},{"location":"README_orig/#introduzione","text":"In VisiData \u00e8 possibile salvare il log delle operazione fatte e riutilizzarlo per applicarle nuovamente al file di input. Se ad esempio a partire da questo file CSV (sotto l'anteprima) si volessero cancellare tutte le righe che contengono il solo carattere a nella prima colonna e infine salvare l' output , la procedura \u00e8: vd input.csv ; posizionarsi nella prima colonna e pigiare | per attivare la selezione tramite espressione regolare, scrivere ^a$ e premere INVIO . Verr\u00e0 fatta la selezione descritta; pigiare in sequenza g e d per cancellare le righe selezionate; poi CTRL+s ; e infine scegliere un nome di output (ad esempio output.csv ) e pigiare INVIO per salvare il file. field1 field2 a 0 b 3 a 4 c 5 Per salvare la procedura di sopra in un file di log, bisogner\u00e0 premere CTRL+d , scegliere un nome per salvare il file (ad esempio cancella_le_a.vd ) e pigiare INVIO . Il file di log salvato avr\u00e0 un contenuto come quello sottostante ( \u00e8 un file TSV ), in cui sono \"mappate\" tutte le operazioni fatte: sheet col row longname input keystrokes comment global null_value set-option open-file input.csv o input field1 select-col-regex ^a$ input delete-selected gd delete (cut) selected rows and move them to clipboard input save-sheet output.csv ^S save current sheet to filename in format determined by extension (default .tsv) Per riapplicare la stessa procedura al file, senza interagire con lo schermo, il comando da lanciare \u00e8: vd -b -p cancella_le_a.vd -b per eseguire VisiData senza attivarne l'interfaccia; -p per replicare un file di log. Se questo comando si lancia dopo avere gi\u00e0 creato il file di output , si avr\u00e0 un messaggio di errore, che avvisa che il file esiste gi\u00e0 e non pu\u00f2 essere sovrascritto. Per fare in modo che venga sovrascritto bisogner\u00e0 aggiungere l'opzione -y : vd -y -b -p cancella_le_a.vd A schermo verr\u00e0 restituito l'elenco delle operazione svolte: opening cancella_le_a.vd as vd \"input.csv\" opening input.csv as csv select rows matching regex in current column \"^a$\" search wrapped 2 matches for /^a$/ selected 2 rows delete (cut) selected rows and move them to clipboard copied 2 rows to clipboard deleted 2 rows save current sheet to filename in format determined by extension (default .tsv) \"output.csv\" saving 1 sheets to output.csv as csv replay complete","title":"Introduzione"},{"location":"README_orig/#applicare-lo-stesso-flusso-a-un-file-diverso-ma-omologo","text":"Spesso si ha la necessit\u00e0 di applicare una stessa procedura ad altri file , con la stessa struttura , ma con contenuti differenti . Per utilizzare il file di log creato con un file diverso da input.csv , bisogner\u00e0 modificare il file di log (si modifica con qualsiasi editor di testo): rimuovere la riga con il riferimento a input.csv rimuovere il riferimento al nome del foglio (qui \u00e8 input , come il nome del file). Diventer\u00e0 quindi: sheet col row longname input keystrokes comment global null_value set-option field1 select-col-regex ^a$ delete-selected gd delete (cut) selected rows and move them to clipboard save-sheet output.csv ^S save current sheet to filename in format determined by extension (default .tsv) Fatto questo, il comando da usare con un nuovo file denominato ad esempio input_nuovo.csv sar\u00e0: vd -y -b -p cancella_le_a.vd input_nuovo.csv In output verr\u00e0 creato il file output.csv . Se si vuole creare un file di output con nome diverso, si deve cancellare dal file di log la riga in cui si fa riferimento a output.csv e lanciare il comando: vd -y -b -p cancella_le_a.vd input_nuovo.csv -o output_nuovo.csv","title":"Applicare lo stesso flusso a un file diverso, ma omologo"},{"location":"README_orig/#nota-sul-file-di-log","text":"Si tratta di un TSV, quindi \u00e8 possibile leggerlo e modificarlo proprio con VisiData :","title":"Nota sul file di log"},{"location":"README_orig/#soluzione-problemi","text":"","title":"Soluzione problemi"},{"location":"README_orig/#riga-attiva-di-colore-nero","text":"Quando si usa VisiData su Windows Subsystem for Linux, la riga attiva risulta invisibile perch\u00e9 tutta nera. Per fare in modo che torni \"visibile\" bisogna modificare il file di configurazione di VisiData. Questo file di default non esiste: si deve trovare nella home dell'utente (quindi in ~ ) e si deve nominare come .visidatarc . Questi i passi: ## vai nella cartella home dell'utente cd ~ ## nano \u00e8 un editor di testo, si installa con \"sudo apt-get install nano. ## Si pu\u00f2 esare usare qualsiasi editor per modificare il file nano .visidatarc Si aprir\u00e0 il file .visidatarc a cui bisogner\u00e0 aggiungere le stringhe sottostanti e poi salvare il file. options.color_key_col='' options.color_selected_row='yellow' options.color_note_type='yellow' options.color_graph_hidden='blue' options.color_column_sep='blue' options.null_value=\"\" options.color_key_col=\"blue\"","title":"Riga attiva di colore nero"},{"location":"README_orig/#caratteri-non-leggibili-in-windows-subsystem-for-linux","text":"Se si usa VisiData in Windows Subsystem for Linux, alcuni caratteri possono risultare non leggibili. Questo dipende dal font usato. Per cambiarlo: click con il destro del mouse sulla barra; e scegliere Propriet\u00e0. Infine si consiglia il font di sotto:","title":"Caratteri non leggibili in Windows Subsystem for Linux"},{"location":"README_orig/#ricette","text":"","title":"Ricette"},{"location":"README_orig/#salvare-una-tabella-html-in-csv-a-partire-da-una-pagina-web","text":"In questo esempio il presupposto \u00e8 che si voglia trasformare in CSV una tabella HTML presente in una pagina web, in cui ci sono pi\u00f9 tabelle. Il punto di partenza \u00e8 quello di estrarre dalla pagina sorgente, una pagina HTML che contiene soltanto la tabella di interesse. La pagina di esempio \u00e8: https://web.archive.org/web/20190618071304/http://www.sias.regione.sicilia.it/NHEOWLH140_00_1.html Questa \u00e8 composta da diverse tabelle. Quella di interesse \u00e8 l'unica composta da pi\u00f9 di 7 colonne, e la query XPATH per estrarla \u00e8 //table[count(tr/td)>7] . La pagina di origine ha l' encoding in ISO-8859-1 , ed \u00e8 da convertire in UTF-8 . Per scaricare la pagina, cambiarne l' encoding ed estrarre la tabella di interesse il comando pu\u00f2 essere curl \"http://www.sias.regione.sicilia.it/NHEOWLH140_00_1.html\" | \\ iconv -f ISO-8859-1 -t utf-8 | \\ scrape -be '//table[count(tr/td)>7]' L' utility usata sopra per fare la query XPATH \u00e8 scrape-cli . In output si ha una pagina web che contiene soltanto la tabella di interesse. Per passarla a VisiData bisogner\u00e0 modificare cos\u00ec lo script: curl \"http://www.sias.regione.sicilia.it/NHEOWLH140_00_1.html\" | \\ iconv -f ISO-8859-1 -t utf-8 | \\ scrape -be '//table[count(tr/td)>7]' | \\ vd -f html Come risultato si aprir\u00e0 la finestra di sotto. Per aprire la tabella sar\u00e0 necessario premere INVIO e poi si potr\u00e0 salvare la tabella in CSV (o altri formati) digitando CTRL+ s . Se si vuole inserire nello script anche la procedura di salvataggio, bisogna modificare lo script in questo modo: curl \"http://www.sias.regione.sicilia.it/NHEOWLH140_00_1.html\" | \\ iconv -f ISO-8859-1 -t utf-8 | \\ scrape -be '//table[count(tr/td)>7]' | \\ vd -b -f html -o out.csv -p dive.vd Note: -b \u00e8 per eseguire VisiData senza interfaccia; -p dive.vd per eseguire dei comandi (qui semplicemente l'apertura della tabella a partire dalla finestra iniziale di sopra). Nel file dive.vd c'\u00e8 il seguente contenuto. sheet col row longname input keystrokes comment open-file - o - 0 dive-row ^J Il file di sopra \u00e8 un file di log di VisiData (vedi sezione dedicata ). Tutte le operazioni fatte in VisiData finiscono in un log che pu\u00f2 essere visualizzato e salvato. Quindi \u00e8 possibile salvare la visualizzazione dell'elenco delle tabelle e poi l'apertura di quella di interesse. Per creare questo di sopra: arrivare a visualizzare la tabella su VisiData; digitare INVIO ; digitate SHIFT + d per visualizzare il log dei comandi; e infine CTRL + s per salvare il file dive.vd .","title":"Salvare una tabella HTML in CSV, a partire da una pagina web"},{"location":"README_orig/#fare-proposte-eo-chiedere-supporto","text":"Il luogo dove farlo \u00e8 senz'altro questo https://github.com/saulpw/visidata/issues . \u00c8 bene farlo scrivendo sempre la versione di VisiData utilizzata, allegare i dati per replicare eventuali problemi riscontrati, documentare la procedura che si vuole realizzare.","title":"Fare proposte e/o Chiedere supporto"},{"location":"README_orig/#note-finali","text":"Il grande Jeremy Singer Vine lo usa da molto pi\u00f9 tempo di me e ha creato la migliore guida introduttiva dedicata in inglese https://jsvine.github.io/intro-to-visidata/ , di cui sono felice di essere nei ringraziamenti . Ne ho attinto a piene mani per scrivere questo post e colgo l'occasione per ringraziarlo di cuore pubblicamente. \u00c8 un'applicazione molto bella, che probabilmente per alcuni diverr\u00e0 (come \u00e8 adesso per me) di uso quotidiano. Jeremy afferma che per analisi complesse, analisi geospaziali, data literature \u00e8 meglio usare altro. Mi sembra sensato. Non sostituisce R o Pandas, ma li pu\u00f2 certamente affiancare e spesso precedere nel workflow di lavoro sui dati. \u00c8 un altro strumento che consiglio di aggiungere nella cassetta degli attrezzi. Lo sviluppatore principale e chi collabora con lui sono molto attenti alle richieste e alle proposte che vengono dall'esterno, in una bella mescolanza di sensibilit\u00e0 \"tecnologica\" e umana. In queste settimane ho aperto diverse issue a cui \u00e8 stato dato sempre riscontro. Alcune erano richieste da uomo primitivo, altre erano buone: confesso di essere orgoglioso di avere avuto degli effetti nel rilascio dell'ultima versione (la 1.5.1) e di essere citato pi\u00f9 volte nelle note di rilascio . Ringrazio molto Saul Pwanson e Anja Kefala . A breve gli proporr\u00f2 l'integrazione in lettura e scrittura dei datapackage , in modo da estendere la qualit\u00e0 e le modalit\u00e0 di lavoro su dati ben descritti e strutturati. ( fatto ) Qui vorremmo aggiornare e arricchire nel tempo i testi e si accettano anche proposte di integrazioni , correzioni e modifiche .","title":"Note finali"},{"location":"README_orig/#url-consigliati","text":"la guida di Jeremy Singer Vine https://jsvine.github.io/intro-to-visidata/ le ricette sul sito ufficiale http://visidata.org/docs/ ; la documentazione ufficiale http://visidata.org/man/ ; la playlist YouTube a cura dell'autore https://www.youtube.com/playlist?list=PLxu7QdBkC7drrAGfYzatPGVHIpv4Et46W ; la lista visuale degli shortcut da tastiera http://visidata.org/docs/kblayout/ .","title":"URL consigliati"},{"location":"dieci_modi_di_usare_visidata/","text":"10 Modi di usare Visidata \u21b5 NOTA BENE : Questa pagina si deve a Salvatore Fiandaca , che ha tradotto in italiano 10 Ways to Use VisiData . Grazie. 1. esplora i set di dati senza sforzo, indipendentemente dal formato \u21b5 $ vd albums.json dropbox/*.xls* agents.sqlite Utilizzare i tasti freccia (\u2191\u2193\u2192\u2190) per spostarsi e q per uscire. VisiData carica i dati da molte fonti e formati diversi , incluso tutto ci\u00f2 che i pandas possono caricare! I nuovi caricatori sono inclusi in ogni versione e puoi crearne uno tu stesso facilmente. 2. convertire da qualsiasi formato di input in qualsiasi formato di output \u21b5 All'interno di VisiData , premere Ctrl+S per salvare il file nel formato specificato dall'estensione. Converti direttamente dalla riga di comando con: $ vd -b input.csv -o output.json 3. come sostituto interattivo di grep, awk, sed, cut, sort, uniq \u21b5 $ netstat -an | vd -f fixed -o used-ports.txt Premi Ctrl+Q per uscire da VisiData e salvare nel file di output specificato. 4. grattare i dati della tabella HTML da una pagina Web: \u21b5 $ vd https://en.wikipedia.org/wiki/List_of_largest_cities 5. vedere una differenza visiva di due fogli con la stessa struttura \u21b5 $ vd --diff foo1.csv foo2.csv 6. esplora un oggetto dal Python REPL \u21b5 >>> visidata.view(obj) 7. esplora tutti i pandas DataFrame \u21b5 >>> visidata.view_pandas(df) 8. creare una pipeline di dati ad hoc \u21b5 VisiData pu\u00f2 anche essere utilizzato in modalit\u00e0 batch con script senza richiedere alcuna interazione. Salvare il cmdlog in un file .vd con Ctrl+D foo.vd , quindi riprodurre il file .vd salvato: $ vd -b -p foo.vd 9. rinominare un mucchio di file \u21b5 Avviare vd nella directory con i file Modifica i nomi dei file ( documentazione sui comandi di modifica ) Ctrl+S per eseguire il commit ( guarda questo video che mostra come utilizzare il browser di directory ) 10. vedi tutte le opzioni e i comandi disponibili \u21b5 Esistono molti altri modi per utilizzare VisiData! Per saperne di pi\u00f9, premi Ctrl H per vedere la manpage o z Ctrl+H per vedere l'elenco completo dei comandi disponibili sul foglio corrente. [scritto da Saul Pwanson 2020-05-01] VisiData \u00a9 2017-2020 Saul Pwanson | Licensed under GPLv3 | Privacy Policy","title":"Dieci modi di usare visidata"},{"location":"dieci_modi_di_usare_visidata/#10-modi-di-usare-visidata","text":"NOTA BENE : Questa pagina si deve a Salvatore Fiandaca , che ha tradotto in italiano 10 Ways to Use VisiData . Grazie.","title":"10 Modi di usare Visidata"},{"location":"dieci_modi_di_usare_visidata/#1-esplora-i-set-di-dati-senza-sforzo-indipendentemente-dal-formato","text":"$ vd albums.json dropbox/*.xls* agents.sqlite Utilizzare i tasti freccia (\u2191\u2193\u2192\u2190) per spostarsi e q per uscire. VisiData carica i dati da molte fonti e formati diversi , incluso tutto ci\u00f2 che i pandas possono caricare! I nuovi caricatori sono inclusi in ogni versione e puoi crearne uno tu stesso facilmente.","title":"1. esplora i set di dati senza sforzo, indipendentemente dal formato"},{"location":"dieci_modi_di_usare_visidata/#2-convertire-da-qualsiasi-formato-di-input-in-qualsiasi-formato-di-output","text":"All'interno di VisiData , premere Ctrl+S per salvare il file nel formato specificato dall'estensione. Converti direttamente dalla riga di comando con: $ vd -b input.csv -o output.json","title":"2. convertire da qualsiasi formato di input in qualsiasi formato di output"},{"location":"dieci_modi_di_usare_visidata/#3-come-sostituto-interattivo-di-grep-awk-sed-cut-sort-uniq","text":"$ netstat -an | vd -f fixed -o used-ports.txt Premi Ctrl+Q per uscire da VisiData e salvare nel file di output specificato.","title":"3. come sostituto interattivo di grep, awk, sed, cut, sort, uniq"},{"location":"dieci_modi_di_usare_visidata/#4-grattare-i-dati-della-tabella-html-da-una-pagina-web","text":"$ vd https://en.wikipedia.org/wiki/List_of_largest_cities","title":"4. grattare i dati della tabella HTML da una pagina Web:"},{"location":"dieci_modi_di_usare_visidata/#5-vedere-una-differenza-visiva-di-due-fogli-con-la-stessa-struttura","text":"$ vd --diff foo1.csv foo2.csv","title":"5. vedere una differenza visiva di due fogli con la stessa struttura"},{"location":"dieci_modi_di_usare_visidata/#6-esplora-un-oggetto-dal-python-repl","text":">>> visidata.view(obj)","title":"6. esplora un oggetto dal Python REPL"},{"location":"dieci_modi_di_usare_visidata/#7-esplora-tutti-i-pandas-dataframe","text":">>> visidata.view_pandas(df)","title":"7. esplora tutti i pandas DataFrame"},{"location":"dieci_modi_di_usare_visidata/#8-creare-una-pipeline-di-dati-ad-hoc","text":"VisiData pu\u00f2 anche essere utilizzato in modalit\u00e0 batch con script senza richiedere alcuna interazione. Salvare il cmdlog in un file .vd con Ctrl+D foo.vd , quindi riprodurre il file .vd salvato: $ vd -b -p foo.vd","title":"8. creare una pipeline di dati ad hoc"},{"location":"dieci_modi_di_usare_visidata/#9-rinominare-un-mucchio-di-file","text":"Avviare vd nella directory con i file Modifica i nomi dei file ( documentazione sui comandi di modifica ) Ctrl+S per eseguire il commit ( guarda questo video che mostra come utilizzare il browser di directory )","title":"9. rinominare un mucchio di file"},{"location":"dieci_modi_di_usare_visidata/#10-vedi-tutte-le-opzioni-e-i-comandi-disponibili","text":"Esistono molti altri modi per utilizzare VisiData! Per saperne di pi\u00f9, premi Ctrl H per vedere la manpage o z Ctrl+H per vedere l'elenco completo dei comandi disponibili sul foglio corrente. [scritto da Saul Pwanson 2020-05-01] VisiData \u00a9 2017-2020 Saul Pwanson | Licensed under GPLv3 | Privacy Policy","title":"10. vedi tutte le opzioni e i comandi disponibili"},{"location":"guida/","text":"VisiData: il coltellino svizzero per i dati, che probabilmente non conosci \u21b5 VisiData \u00e8 un fantastico strumento open source per esplorare e manipolare dati. Mette insieme la chiarezza di un foglio di calcolo , con l'efficienza del terminale e la potenza di Python , in una utility leggera in grado di gestire milioni di righe con facilit\u00e0. La presentazione ufficiale fa un'ottima sintesi, ma non evidenzia la cosa che mi ha colpito di pi\u00f9: quella di Saul Pwanson (il creatore di VisiData) \u00e8 prima di ogni altra cosa una grande idea . Lo si capisce usandolo e spero che emerga anche dalle righe seguenti. Per usarlo non \u00e8 necessario essere uno sviluppatore ; se si conosce un po' Python, sar\u00e0 possibile usarlo in modo ancora pi\u00f9 sorprendente. Perch\u00e9 usarlo \u21b5 \u00c8 rapido , apre quasi istantaneamente file di diverse decine di megabyte ; \u00e8 agile , rende semplice la ricerca , il filtraggio , l' ordinamento ,il join e la ristrutturazione di dati tabellari; consente di avere in pochi passaggi una visione di insieme dei dataset su cui si vuole lavorare; apre molti dei formati tipici di testo strutturato (csv, tsv, xlsx , xls, json, xml, sqlite, shp, html, hdf5, xpt, sas7bdat, sav, dta) si utilizza soltanto da tastiera , ed \u00e8 possibile dimenticarsi del mouse; \u00e8 free ed open source . Apprezzo molto la sua rapidit\u00e0 e come offra in modo agile una visione di insieme sui dati. Questo, affiancato all'utilizzo da tastiera, lo rende un prodotto che d\u00e0 una marcia in pi\u00f9 a chi lo usa. Supportarne lo sviluppo \u21b5 Se VisiData vi piacer\u00e0 e lo utilizzerete, sar\u00e0 cosa buona supportarne lo sviluppo con una donazione . Io ho deciso di farlo e di esserne un \"patrono\"! Si fa da qui https://www.patreon.com/saulpw . Come si installa \u21b5 Per gli sviluppatori, per chi usa la riga di comando, \u00e8 molto facile . \u00c8 scritto in Python 3 e di base basta usare l'installer di Python: pip3 install visidata Per tutti gli altri, bisogna prima installare Python 3 , poi aprire il terminale e lanciare il comando di sopra. Su Windows non c'\u00e8 ancora un supporto diretto. \u00c8 per\u00f2 utilizzabile da chi ha Windows 10: c'\u00e8 da installare il Windows Linux Subsystem ( decine di guide per farlo ), poi installare Python 3 nel sistema Linux e infine dare il comando di sopra dal terminale di Linux. Cheat-sheet \u21b5 Abbiamo tradotto in italiano il cheat-sheet di VisiData, creato da Jeremy Singer Vine, disponibile in HTML e PDF . La versione fronte retro a cura di Gianni Vitrano \u21b5 Gianni Vitrano di OpenDataSicilia a partire da questo cheat-sheet, ha creato la versione da stampare fronte retro a \"libretto\" . Grazie Gianni! 10 Modi di usare Visidata \u21b5 Dieci esempi rapidi , che mostrano cosa \u00e8 possibile fare con VisiData. \u00c8 una sezione a cura di Salvatore Fiandaca (grazie). La guida \u21b5 VisiData \u00e8 un foglio elettronico a riga di comando . Potrebbe suonare come una contraddizione, perch\u00e9 si accosta qualcosa con interfaccia ricca (come un foglio elettronico) a qualcosa di visualmente molto minimale. In realt\u00e0 questa \u00e8 una delle idee forti di questa applicazione, che prende il meglio di questi due mondi: l'approccio a griglia e multi tabella del primo, e la rapidit\u00e0, l'immediatezza, l'essere easy e \"subito pronto\" di un terminale. Di base quindi bisogna prima aprire il terminale. Poi per aprire un file basta scrivere un comando con questa struttura: vd nomeFile.csv A seguire soltanto un piccolo estratto sul come usarlo. Per approfondire ho creato un elenco di URL consigliati . VisiData si usa al 99% con la tastiera, quindi \u00e8 bene che il Caps Lock non sia attivo: gli shortcut da tastiera non funzionerebbero correttamente (grazie Salvatore Fiandaca per la nota). Un esempio di apertura di un file grande \u21b5 \"Grande\" in informatica non vuol dire niente, \u00e8 come \"salato\" con un piatto di pasta. Un CSV grande per il mio PC (un notebook del 2015, con processore i7 e 8 GB di RAM) - se voglio lavorarci in modo \"visuale\" con un foglio elettronico - potrebbe essere gi\u00e0 un CSV da 500000 righe, che mi si apre dopo 1 minuto e 15 secondi e dove un \"trova e sostituisci\" diventa operazione molto lunga (uso LibreOffice Calc). Ci sono anche limiti che non sono personali. Se per esempio provassi a lavorare con uno dei dataset del \" Parco Circolante dei veicoli \" in Italia scoprirei dei limiti strumentali. Un esempio con i dati dell' Abruzzo : con il comando da shell wc -l parco_circolante_Abruzzo.csv leggo che \u00e8 composto da 1170439 righe. Con una regione \"piccola\" come questa si va gi\u00e0 oltre il limite di Calc, che \u00e8 di 1048576 righe. Se voglio comunque visualizzare 1048576 righe di questo dataset, sul mio PC sono necessari circa 5 minuti . Con VisiData lancio vd parco_circolante_Abruzzo.csv e lo visualizzo in 1 secondo . C'\u00e8 il \"trucco\", che \u00e8 invero una delle buone scelte del progettista: il file viene aperto in modo asincrono, caricandone subito una porzione navigabile. In basso a destra (vedi sotto) viene dato conto della percentuale di avanzamento che porter\u00e0 alla piena apertura (meno di 15 secondi). Questo essere \"subito pronto\" lo rende uno strumento di grande comodit\u00e0, che l'ha portato a essere uno dei miei quotidiani. Ribadisco per\u00f2 ancora un volta che il \"grande\" e la valutazione del tempo dipendono dagli obiettivi che si hanno, dalle proprie conoscenze di base e dall' hardware/software che si ha a disposizione. Per chiudere la tabella aperta e Visidata si pigia q sulla tastiera. NOTA BENE : questo file con i dati sul \"Parco Circolante dei veicoli\" in Abruzzo, verr\u00e0 usato in questa guida come dataset di base. Ne ho pertanto creato una copia di backup qui . Navigare tra i dati \u21b5 Per muoversi tra le celle si usano le 4 frecce direzionali dalla tastiera o (come vim, da cui nell'uso da tastiera VisiData prende molta ispirazione) h , j , k , l . Per muoversi in modo pi\u00f9 esteso: g + freccia in basso oppure gj , per andare all'ultima riga; g + freccia in alto oppure gk , per andare alla prima riga; g + freccia a sinistra oppure gh , per andare alla colonna pi\u00f9 a sinistra; g + freccia a destra oppure gl , per andare alla colonna pi\u00f9 a destra; PageDown oppure Control + Shift + f , una pagina in gi\u00f9; PageUp oppure Control + Shift + b , una pagina in alto. NOTA BENE : g \u00e8 il tasto per i comandi \"globali\". Per muoversi tramite ricerca testuale, sfruttando le espressioni regolari: / + regex , cerca in avanti nella colonna corrente; ? + regex , cerca indietro nella colonna corrente; g/ + regex , cerca in avanti in tutte le colonne; g? + regex , cerca indietro in tutte le colonne; Con n e N si va avanti e indietro rispetto agli elementi di output del risultato della ricerca. Infine per saltare a una determinata riga o colonna, rispettivamente zr e zc seguito dal numero di riga e colonna (la numerazione inizia da zero). I fogli \u21b5 In VisiData ci sono tre tipi di fogli: i fogli sorgente, con i dati che si \u00e8 scelto di aprire con VisiData; i fogli derivati, come quelli derivanti da filtraggio o la tabelle con le frequenze (vedi sotto); i metafogli, che descrivono e definiscono i dataset caricati (come quello che descrive ad esempio le colonne di una tabella, o il \"foglio dei fogli\"). Il \"foglio dei fogli\" si apre con Shift + s e fornisce l'elenco (e alcune informazioni correlate) di tutti i fogli aperti. Selezionandone uno e pigiando Invio , quest'ultimo si aprir\u00e0. Per rinominarne uno dal \"foglio dei fogli\", basta selezionarlo, premere e e inserire il nuovo nome e poi dare Invio . O in alternativa, se si \u00e8 davanti al foglio che si vuole rinominare, premere la barra spaziatrice , scrivere rename-sheet , digitare il nuovo nome e infine pigiare su Invio . Il foglio correntemente aperto si chiude con q . Lavorare sulle righe \u21b5 La cosa pi\u00f9 importante da comprendere \u00e8 come selezionarle e deselezionarle, perch\u00e9 molte delle operazioni vengono eseguite proprio su quelle selezionate. I tasti principali di selezione sono: s , per selezionare la riga corrente; u , per deselezionare la riga corrente; t , per invertire la selezione della riga corrente; gs , per selezionare tutte le righe; gu , per deselezionare tutte le righe; gt , per invertire i criteri di selezione per tutte le righe. Selezione di righe tramite espressione regolare \u21b5 | + termine da ricercare , seleziona tutte le righe in cui c'\u00e8 corrispondenza per la colonna corrente; \\ + termine da ricercare , deseleziona tutte le righe in cui c'\u00e8 corrispondenza per la colonna corrente; g| + termine da ricercare , seleziona tutte le righe in cui c'\u00e8 corrispondenza per una qualsiasi colonna; g\\ + termine da ricercare , deseleziona tutte le righe in cui c'\u00e8 corrispondenza per una qualsiasi colonna; , , dato il valore della cella selezionata, seleziona tutte le righe in cui per la colonna corrente c'\u00e8 corrispondenza; g, , seleziona tutte le righe uguali a quelle corrente. Se ad esempio: ci si sposta nella colonna provincia_residenza poi si pigia | ; si digita TERAMO ; si preme Invio . ... si ottiene qualcosa come quella di sotto. Selezione di righe tramite espressioni Python \u21b5 \u00c8 possibile fare una selezione di righe tramite un'espressione di Python ( qui per approfondire sui concetti di base delle espressioni). I comandi da tastiera sono: z| , per selezionare tutte le righe in cui l'espressione \u00e8 valida; z\\ , per deselezionare tutte le righe in cui l'espressione \u00e8 valida. Ad esempio seguendo questi step: gu , per deselezionare tutto; z| , per attivare la selezione tramite espressione Python; scrivendo provincia_residenza == \"PESCARA\" and sesso == \"F\" ; e pigiando su Invio . ... verranno selezionati tutti gli elementi in cui la provincia \u00e8 \"Pescara\" ed il sesso \u00e8 \"F\". Selezione di righe tramite espressioni Python e regex \u21b5 si digita z| ; si scrive l'espressione, come ad esempio re.search(\"^1\", FieldB) and re.search(\"^2\", FieldA) , ovvero tutte le righe in cui il campo FieldB inizia per 1 e il campo FieldA per 2 . Selezionare un numero random di righe \u21b5 aprire una tabella; fare click sulla barra spaziatrice; scrivere random-rows (si pu\u00f2 scrivere anche soltanto ad esempio ran e autocompletare con TAB ) e premere INVIO ; scrivere il numero di righe random che si vogliono selezionare. Spostare righe \u21b5 Si fa con queste combinazioni: Shift+j , per spostare la riga corrente verso il basso; Shift+k , per spostare la riga corrente verso l'alto. Cancellare righe \u21b5 d per cancellare la riga corrente; gd per cancellare le righe selezionate. Modificare il contenuto \u21b5 Questi i comandi di base: e , per modificare la cella corrente; Enter , per chiudere la modifica; Control+c , per cancellare la modifica; Control+a , per andare a inizio linea; Control+e , per andare a fine linea; Control+k , per cancellare il contenuto a partire dalla posizione del cursore. Lavorare sulle colonne \u21b5 Ogni colonna in VisiData ha 3 attributi principali: Name , il nome della colonna; Width , la larghezza a schermo della colonna (se impostata a 0, la colonna diventa invisibile); Type , per definire se contiene testi, numeri interi, numeri decimali, monete o date. Il foglio delle colonne \u21b5 In VisiData esistono i cosiddetti meta-fogli (vedi sopra ): uno di questi \u00e8 il foglio delle colonne, che elenca tutte le colonne e i relativi attributi di una tabella. A partire dalla visualizzazione di una tabella, si apre con Shift+c . \u00c8 una delle caratteristiche di VisiData che consente una rapida prima lettura del dato, che personalmente uso anche ad esempio per costruire brevi relazioni che contengono schema dati. Impostare il tipo di campo \u21b5 Come impostazione predefinita VisiData imposta a \"testo\" la tipologia di tutti i campi (che \u00e8 quello che faccio di solito anche io alla prima apertura sia in un foglio elettronico che in Pandas). Per definire il tipo di campo di una colonna della tabella che si sta visualizzando (cosa che consente di fare correttamente ad esempio operazioni di ordinamento, matematiche, ecc.), si deve navigare sino alla colonna su cui si vuole intervenire e poi pigiare: # , per definire un campo con numeri interi (0, -1, 5000000) % , per definire un campo con numeri decimali (0.5, -3.14, 23.45557) $ , per definire un campo con monete ($4.99, \u20ac20) @ , per definire un campo con date (2018-04-06, April 6, 2018, 04/06/2018) ~ , per definire un campo di testo (qualsiasi cosa!) Impostare numero di decimali in un campo floating \u21b5 Di default i campi floating sono renderizzati con due decimali (la formattazione \u00e8 impostata come %.02f ). Per modificare la cosa si pu\u00f2 aprire il foglio delle colonne ( SHIFT+c ) e modificare il valore di formattazione delle colonna fmtstr (vedi sotto). Per passare a tre decimali per un campo, baster\u00e0 ad esempio modificare la cella della colonna di interesse da %.02f a %.03f (in edit di cella si va con il tasto e ). Se si vuole fare su pi\u00f9 colonne: si apre sempre il foglio delle colonne; si selezionano le colonne di cui si vuole cambiare la formattazione; si va sulla colonna fmtstr ; si va in modifica globale con ge e si inserisce il valore di formattazione desiderato; si preme INVIO per applicare la modifica. Impostare formato data personalizzato \u21b5 Se una cella contiene ad esempio la data 06/11/2020 (qui come 6 novembre 2020), e imposto la colonna come data con il tasto @ , visidata la interpreta come 2020-06-11 , ovvero come 11 giugno. Per impostarla correttamente bisogna impostare un formato data personalizzato: si va sulla colonna con le date; si digita z@ e si preme INVIO ; si imposta il formato - in questo caso %d/%m/%Y - e si preme INVIO . In output si avr\u00e0 2020-11-06 . Rinominare le colonne \u21b5 Per farlo si naviga sino alla colonna che si vuole rinominare e poi: si pigia ^ ; si digita il nome che si vuole assegnare; si pigia Invio . Rinominare le colonne in blocco \u21b5 Pu\u00f2 essere utile ad esempio anteporre dei caratteri a tutte le colonne che iniziano per t . Questi i passi: si apre il foglio colonne con shift + c ; si va nella colonna con il nome delle colonne (\u00e8 la prima); si digita | , si scrive ^t e si pigia INVIO (saranno selezionate tutte le colonne che iniziano con il carattere t ); si pigia g* , per attivare il trova e sostituisci via regex ; si scrive ^(t.+)/TR_\\1 e poi INVIO . Tutte le colonne che iniziano per t , avranno un nuovo nome corrispondente al precedente, con TR_ come prefisso. La colonna tabacco , diventerebbe ad esempio TR_tabacco . Come espandere, ridurre e rimuovere colonne \u21b5 Questi gli shortcut: _ , per espandere la larghezza della colonna corrente, alla larghezza massima del testo contenuto nella stessa, tenendo conto delle righe visualizzate a schermo; g_ , per espandere la larghezza di tutte le colonne, alla larghezza massima del testo contenuto, tenendo conto delle righe visualizzate a schermo; z_ + n , per impostare la larghezza della colonna corrente a n caratteri; - , per nascondere la colonna corrente (viene impostata a 0 la sua larghezza); gv , per scoprire tutte le colonne nascoste; z- , per ridurre la larghezza della colonna corrente alla sua met\u00e0. Spostare una colonna \u21b5 Ecco come farlo: Shift+h , sposta la colonna corrente di una posizione a sinistra; Shift+l , sposta la colonna corrente di una posizione a destra. Modificare una colonna tramite un'espressione Python \u21b5 A questa tabella si vuole assegnare al campo FieldA il valore di FieldB , tutte le volte che FieldA \u00e8 vuoto. FieldA FieldB 1 3 1 12 Questa la procedura: gs per selezionare tutte le righe; g= per scrivere l'espressione Python; aggiungere come espressione FieldB if FieldA==\"\" else FieldA . Ovvero ( FieldA ) \u00e8 uguale FieldB se FieldA non contiene nulla, altrimenti \u00e8 uguale a se stesso (rimane invariato). Calcoli per colonna \u21b5 \u00c8 possibile avere restituito, per una colonna, il risultato di uno dei calcoli di aggregazione disponibili: Ad esempio per avere la somma dei valori di una colonna con numeri interi: si imposta il tipo di colonna a numero intero (con # ); si digita z+ e poi INVIO ; si digita sum e poi INVIO . In basso, si legger\u00e0 il valore risultante. NOTA BENE : se nessuna riga \u00e8 selezionata si avr\u00e0 il totale per colonna, altrimenti il calcolo sar\u00e0 applicato per colonna alle sole righe selezionate. Come definire una colonna chiave \u21b5 Per ogni foglio \u00e8 possibile definire una o pi\u00f9 colonne chiave. Hanno due funzioni principali: rimangono fissate sul lato sinistro, quando si naviga orizzontalmente sulla tabella; hanno una funzione speciale quando si fanno certe operazioni (come quelle di JOIN , per alcuni conteggi, ecc.). Per definire una colonna chiave (e vice-versa) si naviga sino alla colonna di interesse e si pigia ! . Manipolare le colonne dal foglio delle colonne \u21b5 Il foglio delle colonne oltre a dare una visione di insieme, consente di fare delle rapide modifiche in blocco. \u00c8 possibile spostare le colonne con Shift+j e Shift+k , rinominarle con e , impostare il tipo per tutte quelle selezionate, impostare la larghezza per tutte quelle selezionate. Ad esempio a partire dal Parco Circolante dei veicoli dell'Abruzzo, il foglio colonne ( Shift+c ) appare in questo modo. Se si vuole impostare a \"numero intero\" le colonne progressivo e eta_intestatario , bisogner\u00e0 prima selezionarle con s . Poi premere g# . Creare una nuova colonna \u21b5 Sono tre le modalit\u00e0 pi\u00f9 comode: come risultato di un'espressione Python; come risultato di un comando di split ; come risultato di estrazione di una porzione di testo da una colonna. Nuova colonna tramite espressione \u21b5 Ad esempio potrebbe essere utile creare una colonna vero/falso, per tutte le auto del Parco Circolante dei veicoli dell'Abruzzo, con cilindrata maggiore ai 643 (\u00e8 un numero a caso). Per farlo: navigare sino alla colonna cilindrata ; premere % per impostarla come numero decimale; pigiare su = ; nel prompt in basso a sinistra scrivere cilindrata > 643 ; premere Invio . In output qualcosa come quella di sotto, con la nuova colonna risultato di un'espressione Python. Nuove colonne come risultato di splitting \u21b5 Si possono creare nuove colonne, come risultato di una suddivisione di una gi\u00e0 esistente. Ad esempio nel campo data_immatricolazione \u00e8 contenuta sia la data che l'orario, separati da spazio (i.e. 1995-04-03 00:00:00 ). Se si vuole suddividerla in due colonne (data e orario), si pu\u00f2 procedere in questo modo: si naviga sino alla colonna data_immatricolazione ; si preme : ; si sceglie la stringa di testo (definibile anche come espressione regolare) da usare come separatore e si scrive in basso a sinistra nel prompt . In questo caso \u00e8 lo spazio; si digita quindi lo spazio e si d\u00e0 Invio . Come output si avr\u00e0 qualcosa come quella di sotto: due colonne frutto della divisione in pi\u00f9 colonne, sfruttando come separatore lo spazio. Nuove colonne come risultato di cattura e estrazione \u21b5 Per farlo ci vogliono delle conoscenze di base sulle espressioni regolari (che sono una conoscenza propedeutica per chiunque lavori con i dati). Se si vuole ad esempio estrarre l'anno dalla celle che contiene il valore 1995-04-03 00:00:00 , baster\u00e0 definire l'espressione regolare che estrae a partire dall'inizio della cella i primi 4 numeri. Che in termini di espressione regolare \u00e8 ^[0-9]{4} . Per creare una nuova colonna a partire dalla definizione di un'espressione regolare da usare come \"estrattore\", si procede in questo modo: si naviga sulla colonna data_immatricolazione ; si pigia ; ; si scrive nel prompt in basso a sinistra ^([0-9]{4}) . Sono state inserite le parentesi tonde, perch\u00e9 la cattura si fa a partire dalla definizione di un gruppo; si pigia Invio . E si ottiene qualcosa come quella di sotto: Trasformare una colonna tramite espressione regolare (trova e sostituisci) \u21b5 Su ogni colonna \u00e8 possibile fare delle trasformazioni basate su espressioni regolari. Se ad esempio si vogliono rimuovere dalle celle della colonna data_immatricolazione le informazioni sull'orario e passare quindi da 1995-04-03 00:00:00 a 1995-04-03 si pu\u00f2 procedere in questo modo: si selezionano le righe su cui si vuole fare questa trasformazione (se sono tutte il comando \u00e8 gs ); si va nella colonna data_immatricolazione ; si pigia su g* ; si scrive nel prompt .*$/ . Il simbolo / in VisiData separa ci\u00f2 che si cerca, da ci\u00f2 con cui si vuole sostituire. Qui si cerca uno spazio ( ), seguito da qualsiasi carattere sino a fine cella ( .*$ ), e si vuole sostituire con nulla; si pigia Invio (ci vorr\u00e0 un po' di tempo, sono pi\u00f9 di un milione di righe). Il risultato sar\u00e0 qualcosa come quella di sotto: Questo \u00e8 un \"trova e sostituisci\" per colonna. Il foglio delle frequenze \u21b5 Questa \u00e8 una delle funzioni che uso di pi\u00f9 ed \u00e8 un'altra gran bell'idea. A partire da una colonna (o dalla combinazione di pi\u00f9 d'una) \u00e8 possibile - con Shift+f - aprire un foglio derivato, che contiene dei dati relativi al conteggio per valori distinti di quanto contenuto in quella colonna. Se per esempio a partire dal Parco Circolante dei veicoli dell'Abruzzo, si volesse avere un'idea sulla distribuzione per \"marca\", basta navigare in vista tabella sino a quella colonna e poi pigiare Shift+f e avere qualcosa come quella di sotto. I dati sono ordinati per conteggio ed emerge subito come una famosa marca nazionale da sola faccia \u00bc del campione. Cos\u00ec come emerge che c'\u00e8 un 5% di elementi in cui la marca non \u00e8 definita e anche questa \u00e8 un'informazione che ci potrebbe consentire da subito di prendere delle decisioni. Molto comoda anche la colonna histogram che da visivamente in modo molto diretto un'idea del rapporto tra i numeri descritti in tabella. Lavorare sulle celle \u21b5 Fare un trova e sostituisci globale \u21b5 Si parte dal selezionare le righe su cui si vuole eseguire l'operazione (se sono tutte il comando \u00e8 gs ). Digitare gz* e poi scrivere stringa da trovare / stringa da sostituire e dare INVIO . Se ad esempio volessi sostituire la stringa pal con mis , dovrei scrivere pal/mis . \u00c8 possibile usare anche le espressioni regolari. Ordinare e filtrare \u21b5 Ordinare righe \u21b5 I tasti [ e ] ordinano i dati rispettivamente in modo crescente e decrescente, a partire dalla colonna attiva. Filtrare righe \u21b5 \u00c8 possibile estrarre in vari modi un campione delle righe della tabella visualizzata. Quello di base \u00e8 a partire dalla selezione delle righe (in uno dei modi visti sopra) e poi pigiare \" . Ad esempio si naviga sino alla colonna marca , si preme | , si scrive chevr , si pigia Invio (vengono selezionati tutti i record associati a CHEVROLET ) e infine si preme \" . Si avr\u00e0 una tabella filtrata, con gli 8814 record relativi a questa marca per l'Abruzzo. Oppure posso farlo a partire da un \"foglio delle frequenze\" (vedi qui ): si naviga sino alla colonna marca ; si pigia Shift+f , che mi da in output il conteggio dei valori distinti per marca (sono pi\u00f9 di un milione di record, ci vorr\u00e0 un po' di tempo); si scorre sino alla riga che contiene la marca che si vuole filtrare; si pigia Invio e si avr\u00e0 una tabella filtrata, con i record relativi a quella marca per l'Abruzzo. Dal foglio delle frequenze \u00e8 possibile filtrare su pi\u00f9 di un elemento: si selezionano ad esempio tre marche, pigiando s per ognuna; si chiude il foglio delle frequenze con q e si torna al foglio dati; si pigia \" e si ottiene una tabella filtrata con i dati relativi alle sole tre marche selezionate prima. Filtro tramite espressione Python \u21b5 \u00c8 possibile filtrare righe tramite un' espressione Python ( qui la documentazione ufficiale e qui una guida che consiglio). Se ad esempio dalla tabella di sotto si volessero soltanto le province con pi\u00f9 di 350.000 abitanti basterebbe: per prima cosa impostare il campo Popolazione come numerico, pigiando # ; pigiare z| per attivare il filtro tramite espressione Python; scrivere l'espressione basata sulla colonna, che qui \u00e8 Popolazione>350000 e poi premere INVIO . In output si avr\u00e0 la selezione di tutte le righe che risolvono l'espressione scritta. Note: nel filtro per espressione c'\u00e8 l'autocompletamento del nome colonna, quindi se si scrive ad esempio Pop e poi si fa click su TAB , viene restituito a schermo Popolazione ; \u00e8 possibile scrivere espressioni complesse, che fanno riferimento a pi\u00f9 colonne. Filtro tramite espressione Python su campo datetime \u21b5 \u00c8 possibile filtrare righe tramite un'espressione Python a partire da campi datetime , dopo averli impostare come data. Usando questo file CSV (by PCM-DPC ), se ad esempio dalla tabella di sotto si volessero soltanto i record con giorno 29: basterebbe: per prima cosa impostare il campo data come data, pigiando @ ; pigiare z| per attivare il filtro tramite espressione Python; scrivere l'espressione basata sulla colonna, che qui \u00e8 data.day == 29 e poi premere INVIO . In output si avr\u00e0 la selezione di tutte le righe che risolvono l'espressione scritta. Osservazioni: oltre a day \u00e8 possibile usare: month , year e hour Se si vogliono ad esempio selezionare soltanto righe con date nel futuro, l'espressione sar\u00e0 data > datetime.datetime.now() . Filtri tramite espressioni python, basati su pi\u00f9 colonne \u21b5 Si vogliono ad esempio selezionare tutte le righe in cui il domicilio non \u00e8 n\u00e9 a Palermo, n\u00e9 a Ragusa, ma la cui residenza \u00e8 in una di queste due citt\u00e0. A partire ad esempio da: domicilio residenza PA PA RG RG TO TO VE PA Questa la procedura: pigiare z| per selezionare tramite espressione Python; scrivere re.search(\"^(?!PA|RG).*\", domicilio) and re.search(\"(PA|RG)\", residenza) ; premere INVIO . La prima \u00e8 una speciale condizione di regex , che cerca al negativo. Sar\u00e0 selezionata soltanto la riga seguente: domicilio residenza VE PA Riepilogo dei dati \u21b5 Uno dei modi per avere un riepilogo \u00e8 usare il foglio delle frequenze (vedi qui ). \u00c8 possibile generare un foglio delle frequenze anche basato su pi\u00f9 colonne. Per farlo si impostano come colonne chiave ( qui come fare) quelle che si vogliono trasformare in \"foglio delle frequenze\", e poi si pigia g+Shift+f . Qui sotto ad esempio un riepilogo per le coppie univoche di destinazione/alimentazione . Aggiunta di aggregatori \u21b5 I fogli di frequenza, oltre al conteggio per valori distinti, possono contenere altri calcoli. Gli \"aggregatori\" possibili sono min , max , avg / mean , median , q3/q4/q5/q10 (terzili/quartili/quintili/decili), sum , distinct , count e keymax . Ad esempio per ogni provincia si pu\u00f2 avere restituito la distribuzione di et\u00e0 per quartile e scoprire che il 50% del campione \u00e8 compreso nella fascia di et\u00e0 tra i 18 e circa i 55 anni. Per aggiungere l'aggregatore q4 al foglio delle frequenze, bisogna seguire questi passi: navigare sino alla colonna eta_intestatario e impostarla a numero intero con # ; premere + e scrivere (in basso a sinistra) q4 (per il calcolo dei quartili, quindi al 25, 50 e 75 percento); navigare sino alla colonna provincia_residenza e pigiare Shift+f . Inizier\u00e0 da subito il calcolo (che non \u00e8 immediato, sono pi\u00f9 di un milione di righe) e alla fine si avr\u00e0 qualcosa come l'immagine di sopra (non \u00e8 fico VisiData?). Il riepilogo globale \u21b5 Per avere una visione a \"volo d'uccello\" sull'intera tabella esiste il comando Shift+i , che restituisce un riepilogo statistico per tutte le colonne. Se prima di lanciarlo si definiscono correttamente i campi (ad esempio i numerici, come numerici), verranno eseguiti correttamente anche i calcoli per min , max , median , mean , stdev . Questa \u00e8 un'altra feature di grande comodit\u00e0 (presente in molte applicazione e ambienti per analisi dati), che verr\u00e0 usata molto da chi lavorer\u00e0 con VisiData. Salvare un foglio \u21b5 Per salvare un foglio si preme CTRL+s , poi si scrive il nome del file con estensione ( nomeEsempio.csv ) e infine si pigia Invio . Fare il redirect dell'output verso lo stdout \u21b5 Il comando vd input.csv -b --save-filetype json | jq . invier\u00e0 ad esempio a jq un output JSON a partire dal CSV di input . Se ad esempio si vuole passare l'output a grep: vd input.csv -b --save-filetype tsv 2> /dev/null | grep 'a' 2> /dev/null per non avere stderr a schermo. Fare JOIN tra tabelle \u21b5 Se ad esempio si volesse calcolare il rapporto tra numero di mezzi e popolazione, sarebbe utile fare un JOIN con una tabella con i dati della popolazione residente. I dati per provincia sono quelli di sotto e sono stati salvati in un file TSV denominato popolazioneAbruzzo.tsv (fonte ISTAT ). Provincia Popolazione L'AQUILA 300404 TERAMO 308284 PESCARA 319388 CHIETI 387120 Si pu\u00f2 fare in questo modo: si parte da vd parco_circolante_Abruzzo.csv ; si va sulla colonna provincia_residenza ; si calcola il foglio delle frequenze pigiando Shift+f e si ottiene si rinomina questo foglio frequenze premendo la barra spaziatrice, scrivendo il comando rename-sheet e dando poi Invio . E poi inserendo il nome nuovo (ad esempio mezziProvincia ); si apre la tabella con i dati sulla popolazione per provincia, pigiando o , scrivendo popolazioneAbruzzo.tsv (che \u00e8 il nome del file) e pigiando Invio (NOTA BENE si pu\u00f2 scrivere anche soltanto popo e poi pigiare TAB e il nome del file verr\u00e0 autocompletato). Si otterr\u00e0 si va nella colonna Provincia e si preme ! per impostarla come colonna chiave. Il JOIN in VisiData viene fatto tra colonne chiave; si apre il \"foglio dei fogli\" con Shift+s e si visualizzer\u00e0 qualcosa come; si va nella riga che contiene lo sheet popolazioneAbruzzo e si pigia INVIO ; si va di nuovo nella colonna Provincia e si preme ! per impostarla come colonna chiave; si apre il \"foglio dei fogli\" con Shift+s ; si selezionano con s le due tabelle mezziProvincia e popolazioneAbruzzo ; si pigia & che \u00e8 il comando di JOIN e in basso a sinistra ci viene chiesto quale tipo si vuole applicare ( nota bene : con VisiData >2.0 si deve premere CTRL + x e scegliere il tipo di JOIN ); si scrive inner e si pigia Invio e si ottiene una tabella che contiene sia il numero di mezzi per provincia, che il numero di abitanti. Da questa tabella a questo punto, semplificando un po', si potrebbe rapidamente calcolare il numero macchine per persona, in questo modo: si va nella colonna Popolazione e si preme # per impostarla come numero intero; si pigia = (per creare una nuova colonna con valori frutto di un'espressione); si scrive poi nel prompt count/Popolazione (c'\u00e8 l'autocompletamento con TAB dei nomi delle colonne); e si ottiene un risultato come quello di sotto. Concatenare tabelle \u21b5 La concatenazione tra due o pi\u00f9 tabelle con la stessa struttura si attiva tramite & . Ad esempio, a partire dai due file inputFileOne.csv e inputFileTwo.csv , presenti qui si procede in questo modo: si apre la shell e si va nella cartella che contiene i file da concatenare; si scrive vd e si preme Invio ; si seleziona la prima voce DirSheet for the current directory e si preme invio ; si selezionano con s i due file; si preme g Invio per aprirli entrambi; si apre il foglio dei fogli con Shift+s ; si selezionano inputFileOne.csv e inputFileTwo.csv con s ; si preme & per attivare la concatenazione; si preme Ctrl+X per il menu; si seleziona append e poi si preme Invio . Si avr\u00e0 a video l'unione dei due file di input (in questo video una replica di quanto descritto, per versioni vd < 2 ). Tabelle Pivot \u21b5 Ecco ad esempio come creare quella che da conto del numero di mezzi per marca, suddivisi per provincia: si va nella colonna marca e si imposta come colonna chiave, premendo ! ; si va poi nella colonna provincia_residenza e si pigia Shift+w ; si ottiene la tabella pivot desiderata. Se invece del conteggio delle occorrenze si volesse (a partire da un altro campo) calcolare un altro dato aggregato - come ad esempio l'et\u00e0 media per marca e provincia - si pu\u00f2 procedere in questo modo: si va nella colonna eta_intestatario e si imposta a numero intero, pigiando su # ; si preme + , poi in basso a sinistra nel prompt si scrive avg e infine si d\u00e0 Invio ; si va di nuovo nella colonna provincia_residenza e si pigia Shift+w . In output, per ogni provincia, si avr\u00e0 quindi la media desiderata. Creare un grafico di dispersione (scatter plot) \u21b5 VisiData pu\u00f2 stampare a schermo anche dei grafici XY. Non \u00e8 un suo punto di forza, ma pu\u00f2 essere utile per avere una prima e grezza visualizzazione spaziale dell'insieme dei dati. Il requisito per crearne uno, \u00e8 avere due colonne numeriche, da usare come coppia di coordinate. Qualcosa come quella di sotto. fid X Y 1 12.29 43.76 2 12.16 43.64 3 12.15 43.65 4 12.16 43.63 ... ... ... Per generare il grafico baster\u00e0 seguire i seguenti passi: impostare come numeriche (numeri decimali digitando % sulla colonna, o # per numeri interi) le due colonne con le coordinate; impostare come colonna chiave la colonna con le ascisse, selezionandola e digitando ! ; selezionare la colonna con le ordinate e digitare . . In output si avr\u00e0 qualcosa come quella di sotto Moduli Python \u21b5 VisiData \u00e8 un foglio elettronico basato su Python 3. Questo consente di utilizzare al suo interno la galassia dei moduli disponibili per Python. Per farlo, bisogna precaricare questi moduli all'avvio di VisiData. Questo si realizza modificando il file di configurazione del programma - si chiama .visidatarc - contenuto nella cartella home dell'utente. Se si vuole ad esempio sfruttare il modulo datetime , si apre in modifica il file .visidatarc e si aggiunge la riga from datetime import datetime Poi si salva il file e si fa partire VisiData. Se ad esempio si vuole fare un'analisi sulla data di immatricolazione per mese a partire dalla colonna data_immatricolazione e si volesse sfruttare il modulo datetime , si pu\u00f2 procedere in questo modo: si va nella colonna data_immatricolazione ; si preme = ; si scrive nel prompt datetime.strptime(data_immatricolazione, '%Y-%m-%d %H:%M:%S').month e si pigia Invio . Si ottiene qualcosa come quella di sotto: E a questo punto si pu\u00f2 rinominare la colonna premendo ^ , scrivendo \"mese\" e poi premendo Invio . E poi creare il foglio delle frequenze della colonna mese , pigiando Shift+f e scoprire che in Abruzzo si immatricola soprattutto a gennaio. NOTA BENE : le funzioni del modulo datetime sono disponibili in modo nativo per le colonne gi\u00e0 impostate (come tipo) a data. Quanto scritto sopra vale soprattutto come guida al come precaricare e utilizzare un modulo Python in VisiData. Salvare un flusso di lavoro \u21b5 Introduzione \u21b5 In VisiData \u00e8 possibile salvare il log delle operazione fatte e riutilizzarlo per applicarle nuovamente al file di input. Se ad esempio a partire da questo file CSV (sotto l'anteprima) si volessero cancellare tutte le righe che contengono il solo carattere a nella prima colonna e infine salvare l' output , la procedura \u00e8: vd input.csv ; posizionarsi nella prima colonna e pigiare | per attivare la selezione tramite espressione regolare, scrivere ^a$ e premere INVIO . Verr\u00e0 fatta la selezione descritta; pigiare in sequenza g e d per cancellare le righe selezionate; poi CTRL+s ; e infine scegliere un nome di output (ad esempio output.csv ) e pigiare INVIO per salvare il file. field1 field2 a 0 b 3 a 4 c 5 Per salvare la procedura di sopra in un file di log, bisogner\u00e0 premere CTRL+d , scegliere un nome per salvare il file (ad esempio cancella_le_a.vd ) e pigiare INVIO . Il file di log salvato avr\u00e0 un contenuto come quello sottostante ( \u00e8 un file TSV ), in cui sono \"mappate\" tutte le operazioni fatte: sheet col row longname input keystrokes comment global null_value set-option open-file input.csv o input field1 select-col-regex ^a$ input delete-selected gd delete (cut) selected rows and move them to clipboard input save-sheet output.csv ^S save current sheet to filename in format determined by extension (default .tsv) Per riapplicare la stessa procedura al file, senza interagire con lo schermo, il comando da lanciare \u00e8: vd -b -p cancella_le_a.vd -b per eseguire VisiData senza attivarne l'interfaccia; -p per replicare un file di log. Se questo comando si lancia dopo avere gi\u00e0 creato il file di output , si avr\u00e0 un messaggio di errore, che avvisa che il file esiste gi\u00e0 e non pu\u00f2 essere sovrascritto. Per fare in modo che venga sovrascritto bisogner\u00e0 aggiungere l'opzione -y : vd -y -b -p cancella_le_a.vd A schermo verr\u00e0 restituito l'elenco delle operazione svolte: opening cancella_le_a.vd as vd \"input.csv\" opening input.csv as csv select rows matching regex in current column \"^a$\" search wrapped 2 matches for /^a$/ selected 2 rows delete (cut) selected rows and move them to clipboard copied 2 rows to clipboard deleted 2 rows save current sheet to filename in format determined by extension (default .tsv) \"output.csv\" saving 1 sheets to output.csv as csv replay complete Applicare lo stesso flusso a un file diverso, ma omologo \u21b5 Spesso si ha la necessit\u00e0 di applicare una stessa procedura ad altri file , con la stessa struttura , ma con contenuti differenti . Per utilizzare il file di log creato con un file diverso da input.csv , bisogner\u00e0 modificare il file di log (si modifica con qualsiasi editor di testo): rimuovere la riga con il riferimento a input.csv rimuovere il riferimento al nome del foglio (qui \u00e8 input , come il nome del file). Diventer\u00e0 quindi: sheet col row longname input keystrokes comment global null_value set-option field1 select-col-regex ^a$ delete-selected gd delete (cut) selected rows and move them to clipboard save-sheet output.csv ^S save current sheet to filename in format determined by extension (default .tsv) Fatto questo, il comando da usare con un nuovo file denominato ad esempio input_nuovo.csv sar\u00e0: vd -y -b -p cancella_le_a.vd input_nuovo.csv In output verr\u00e0 creato il file output.csv . Se si vuole creare un file di output con nome diverso, si deve cancellare dal file di log la riga in cui si fa riferimento a output.csv e lanciare il comando: vd -y -b -p cancella_le_a.vd input_nuovo.csv -o output_nuovo.csv Nota sul file di log \u21b5 Si tratta di un TSV, quindi \u00e8 possibile leggerlo e modificarlo proprio con VisiData : Soluzione problemi \u21b5 Riga attiva di colore nero \u21b5 Quando si usa VisiData su Windows Subsystem for Linux, la riga attiva risulta invisibile perch\u00e9 tutta nera. Per fare in modo che torni \"visibile\" bisogna modificare il file di configurazione di VisiData. Questo file di default non esiste: si deve trovare nella home dell'utente (quindi in ~ ) e si deve nominare come .visidatarc . Questi i passi: ## vai nella cartella home dell'utente cd ~ ## nano \u00e8 un editor di testo, si installa con \"sudo apt-get install nano. ## Si pu\u00f2 esare usare qualsiasi editor per modificare il file nano .visidatarc Si aprir\u00e0 il file .visidatarc a cui bisogner\u00e0 aggiungere le stringhe sottostanti e poi salvare il file. options.color_key_col='' options.color_selected_row='yellow' options.color_note_type='yellow' options.color_graph_hidden='blue' options.color_column_sep='blue' options.null_value=\"\" options.color_key_col=\"blue\" Caratteri non leggibili in Windows Subsystem for Linux \u21b5 Se si usa VisiData in Windows Subsystem for Linux, alcuni caratteri possono risultare non leggibili. Questo dipende dal font usato. Per cambiarlo: click con il destro del mouse sulla barra; e scegliere Propriet\u00e0. Infine si consiglia il font di sotto: Ricette \u21b5 Salvare una tabella HTML in CSV, a partire da una pagina web \u21b5 In questo esempio il presupposto \u00e8 che si voglia trasformare in CSV una tabella HTML presente in una pagina web, in cui ci sono pi\u00f9 tabelle. Il punto di partenza \u00e8 quello di estrarre dalla pagina sorgente, una pagina HTML che contiene soltanto la tabella di interesse. La pagina di esempio \u00e8: https://web.archive.org/web/20190618071304/http://www.sias.regione.sicilia.it/NHEOWLH140_00_1.html Questa \u00e8 composta da diverse tabelle. Quella di interesse \u00e8 l'unica composta da pi\u00f9 di 7 colonne, e la query XPATH per estrarla \u00e8 //table[count(tr/td)>7] . La pagina di origine ha l' encoding in ISO-8859-1 , ed \u00e8 da convertire in UTF-8 . Per scaricare la pagina, cambiarne l' encoding ed estrarre la tabella di interesse il comando pu\u00f2 essere curl \"http://www.sias.regione.sicilia.it/NHEOWLH140_00_1.html\" | \\ iconv -f ISO-8859-1 -t utf-8 | \\ scrape -be '//table[count(tr/td)>7]' L' utility usata sopra per fare la query XPATH \u00e8 scrape-cli . In output si ha una pagina web che contiene soltanto la tabella di interesse. Per passarla a VisiData bisogner\u00e0 modificare cos\u00ec lo script: curl \"http://www.sias.regione.sicilia.it/NHEOWLH140_00_1.html\" | \\ iconv -f ISO-8859-1 -t utf-8 | \\ scrape -be '//table[count(tr/td)>7]' | \\ vd -f html Come risultato si aprir\u00e0 la finestra di sotto. Per aprire la tabella sar\u00e0 necessario premere INVIO e poi si potr\u00e0 salvare la tabella in CSV (o altri formati) digitando CTRL+ s . Se si vuole inserire nello script anche la procedura di salvataggio, bisogna modificare lo script in questo modo: curl \"http://www.sias.regione.sicilia.it/NHEOWLH140_00_1.html\" | \\ iconv -f ISO-8859-1 -t utf-8 | \\ scrape -be '//table[count(tr/td)>7]' | \\ vd -b -f html -o out.csv -p dive.vd Note: -b \u00e8 per eseguire VisiData senza interfaccia; -p dive.vd per eseguire dei comandi (qui semplicemente l'apertura della tabella a partire dalla finestra iniziale di sopra). Nel file dive.vd c'\u00e8 il seguente contenuto. sheet col row longname input keystrokes comment open-file - o - 0 dive-row ^J Il file di sopra \u00e8 un file di log di VisiData (vedi sezione dedicata ). Tutte le operazioni fatte in VisiData finiscono in un log che pu\u00f2 essere visualizzato e salvato. Quindi \u00e8 possibile salvare la visualizzazione dell'elenco delle tabelle e poi l'apertura di quella di interesse. Per creare questo di sopra: arrivare a visualizzare la tabella su VisiData; digitare INVIO ; digitate SHIFT + d per visualizzare il log dei comandi; e infine CTRL + s per salvare il file dive.vd . Fare proposte e/o Chiedere supporto \u21b5 Il luogo dove farlo \u00e8 senz'altro questo https://github.com/saulpw/visidata/issues . \u00c8 bene farlo scrivendo sempre la versione di VisiData utilizzata, allegare i dati per replicare eventuali problemi riscontrati, documentare la procedura che si vuole realizzare. Note finali \u21b5 Il grande Jeremy Singer Vine lo usa da molto pi\u00f9 tempo di me e ha creato la migliore guida introduttiva dedicata in inglese https://jsvine.github.io/intro-to-visidata/ , di cui sono felice di essere nei ringraziamenti . Ne ho attinto a piene mani per scrivere questo post e colgo l'occasione per ringraziarlo di cuore pubblicamente. \u00c8 un'applicazione molto bella, che probabilmente per alcuni diverr\u00e0 (come \u00e8 adesso per me) di uso quotidiano. Jeremy afferma che per analisi complesse, analisi geospaziali, data literature \u00e8 meglio usare altro. Mi sembra sensato. Non sostituisce R o Pandas, ma li pu\u00f2 certamente affiancare e spesso precedere nel workflow di lavoro sui dati. \u00c8 un altro strumento che consiglio di aggiungere nella cassetta degli attrezzi. Lo sviluppatore principale e chi collabora con lui sono molto attenti alle richieste e alle proposte che vengono dall'esterno, in una bella mescolanza di sensibilit\u00e0 \"tecnologica\" e umana. In queste settimane ho aperto diverse issue a cui \u00e8 stato dato sempre riscontro. Alcune erano richieste da uomo primitivo, altre erano buone: confesso di essere orgoglioso di avere avuto degli effetti nel rilascio dell'ultima versione (la 1.5.1) e di essere citato pi\u00f9 volte nelle note di rilascio . Ringrazio molto Saul Pwanson e Anja Kefala . A breve gli proporr\u00f2 l'integrazione in lettura e scrittura dei datapackage , in modo da estendere la qualit\u00e0 e le modalit\u00e0 di lavoro su dati ben descritti e strutturati. ( fatto ) Qui vorremmo aggiornare e arricchire nel tempo i testi e si accettano anche proposte di integrazioni , correzioni e modifiche . URL consigliati \u21b5 la guida di Jeremy Singer Vine https://jsvine.github.io/intro-to-visidata/ le ricette sul sito ufficiale http://visidata.org/docs/ ; la documentazione ufficiale http://visidata.org/man/ ; la playlist YouTube a cura dell'autore https://www.youtube.com/playlist?list=PLxu7QdBkC7drrAGfYzatPGVHIpv4Et46W ; la lista visuale degli shortcut da tastiera http://visidata.org/docs/kblayout/ .","title":"VisiData"},{"location":"guida/#visidata-il-coltellino-svizzero-per-i-dati-che-probabilmente-non-conosci","text":"VisiData \u00e8 un fantastico strumento open source per esplorare e manipolare dati. Mette insieme la chiarezza di un foglio di calcolo , con l'efficienza del terminale e la potenza di Python , in una utility leggera in grado di gestire milioni di righe con facilit\u00e0. La presentazione ufficiale fa un'ottima sintesi, ma non evidenzia la cosa che mi ha colpito di pi\u00f9: quella di Saul Pwanson (il creatore di VisiData) \u00e8 prima di ogni altra cosa una grande idea . Lo si capisce usandolo e spero che emerga anche dalle righe seguenti. Per usarlo non \u00e8 necessario essere uno sviluppatore ; se si conosce un po' Python, sar\u00e0 possibile usarlo in modo ancora pi\u00f9 sorprendente.","title":"VisiData: il coltellino svizzero per i dati, che probabilmente non conosci"},{"location":"guida/#perche-usarlo","text":"\u00c8 rapido , apre quasi istantaneamente file di diverse decine di megabyte ; \u00e8 agile , rende semplice la ricerca , il filtraggio , l' ordinamento ,il join e la ristrutturazione di dati tabellari; consente di avere in pochi passaggi una visione di insieme dei dataset su cui si vuole lavorare; apre molti dei formati tipici di testo strutturato (csv, tsv, xlsx , xls, json, xml, sqlite, shp, html, hdf5, xpt, sas7bdat, sav, dta) si utilizza soltanto da tastiera , ed \u00e8 possibile dimenticarsi del mouse; \u00e8 free ed open source . Apprezzo molto la sua rapidit\u00e0 e come offra in modo agile una visione di insieme sui dati. Questo, affiancato all'utilizzo da tastiera, lo rende un prodotto che d\u00e0 una marcia in pi\u00f9 a chi lo usa.","title":"Perch\u00e9 usarlo"},{"location":"guida/#supportarne-lo-sviluppo","text":"Se VisiData vi piacer\u00e0 e lo utilizzerete, sar\u00e0 cosa buona supportarne lo sviluppo con una donazione . Io ho deciso di farlo e di esserne un \"patrono\"! Si fa da qui https://www.patreon.com/saulpw .","title":"Supportarne lo sviluppo"},{"location":"guida/#come-si-installa","text":"Per gli sviluppatori, per chi usa la riga di comando, \u00e8 molto facile . \u00c8 scritto in Python 3 e di base basta usare l'installer di Python: pip3 install visidata Per tutti gli altri, bisogna prima installare Python 3 , poi aprire il terminale e lanciare il comando di sopra. Su Windows non c'\u00e8 ancora un supporto diretto. \u00c8 per\u00f2 utilizzabile da chi ha Windows 10: c'\u00e8 da installare il Windows Linux Subsystem ( decine di guide per farlo ), poi installare Python 3 nel sistema Linux e infine dare il comando di sopra dal terminale di Linux.","title":"Come si installa"},{"location":"guida/#cheat-sheet","text":"Abbiamo tradotto in italiano il cheat-sheet di VisiData, creato da Jeremy Singer Vine, disponibile in HTML e PDF .","title":"Cheat-sheet"},{"location":"guida/#la-versione-fronte-retro-a-cura-di-gianni-vitrano","text":"Gianni Vitrano di OpenDataSicilia a partire da questo cheat-sheet, ha creato la versione da stampare fronte retro a \"libretto\" . Grazie Gianni!","title":"La versione fronte retro a cura di Gianni Vitrano"},{"location":"guida/#10-modi-di-usare-visidata","text":"Dieci esempi rapidi , che mostrano cosa \u00e8 possibile fare con VisiData. \u00c8 una sezione a cura di Salvatore Fiandaca (grazie).","title":"10 Modi di usare Visidata"},{"location":"guida/#la-guida","text":"VisiData \u00e8 un foglio elettronico a riga di comando . Potrebbe suonare come una contraddizione, perch\u00e9 si accosta qualcosa con interfaccia ricca (come un foglio elettronico) a qualcosa di visualmente molto minimale. In realt\u00e0 questa \u00e8 una delle idee forti di questa applicazione, che prende il meglio di questi due mondi: l'approccio a griglia e multi tabella del primo, e la rapidit\u00e0, l'immediatezza, l'essere easy e \"subito pronto\" di un terminale. Di base quindi bisogna prima aprire il terminale. Poi per aprire un file basta scrivere un comando con questa struttura: vd nomeFile.csv A seguire soltanto un piccolo estratto sul come usarlo. Per approfondire ho creato un elenco di URL consigliati . VisiData si usa al 99% con la tastiera, quindi \u00e8 bene che il Caps Lock non sia attivo: gli shortcut da tastiera non funzionerebbero correttamente (grazie Salvatore Fiandaca per la nota).","title":"La guida"},{"location":"guida/#un-esempio-di-apertura-di-un-file-grande","text":"\"Grande\" in informatica non vuol dire niente, \u00e8 come \"salato\" con un piatto di pasta. Un CSV grande per il mio PC (un notebook del 2015, con processore i7 e 8 GB di RAM) - se voglio lavorarci in modo \"visuale\" con un foglio elettronico - potrebbe essere gi\u00e0 un CSV da 500000 righe, che mi si apre dopo 1 minuto e 15 secondi e dove un \"trova e sostituisci\" diventa operazione molto lunga (uso LibreOffice Calc). Ci sono anche limiti che non sono personali. Se per esempio provassi a lavorare con uno dei dataset del \" Parco Circolante dei veicoli \" in Italia scoprirei dei limiti strumentali. Un esempio con i dati dell' Abruzzo : con il comando da shell wc -l parco_circolante_Abruzzo.csv leggo che \u00e8 composto da 1170439 righe. Con una regione \"piccola\" come questa si va gi\u00e0 oltre il limite di Calc, che \u00e8 di 1048576 righe. Se voglio comunque visualizzare 1048576 righe di questo dataset, sul mio PC sono necessari circa 5 minuti . Con VisiData lancio vd parco_circolante_Abruzzo.csv e lo visualizzo in 1 secondo . C'\u00e8 il \"trucco\", che \u00e8 invero una delle buone scelte del progettista: il file viene aperto in modo asincrono, caricandone subito una porzione navigabile. In basso a destra (vedi sotto) viene dato conto della percentuale di avanzamento che porter\u00e0 alla piena apertura (meno di 15 secondi). Questo essere \"subito pronto\" lo rende uno strumento di grande comodit\u00e0, che l'ha portato a essere uno dei miei quotidiani. Ribadisco per\u00f2 ancora un volta che il \"grande\" e la valutazione del tempo dipendono dagli obiettivi che si hanno, dalle proprie conoscenze di base e dall' hardware/software che si ha a disposizione. Per chiudere la tabella aperta e Visidata si pigia q sulla tastiera. NOTA BENE : questo file con i dati sul \"Parco Circolante dei veicoli\" in Abruzzo, verr\u00e0 usato in questa guida come dataset di base. Ne ho pertanto creato una copia di backup qui .","title":"Un esempio di apertura di un file grande"},{"location":"guida/#navigare-tra-i-dati","text":"Per muoversi tra le celle si usano le 4 frecce direzionali dalla tastiera o (come vim, da cui nell'uso da tastiera VisiData prende molta ispirazione) h , j , k , l . Per muoversi in modo pi\u00f9 esteso: g + freccia in basso oppure gj , per andare all'ultima riga; g + freccia in alto oppure gk , per andare alla prima riga; g + freccia a sinistra oppure gh , per andare alla colonna pi\u00f9 a sinistra; g + freccia a destra oppure gl , per andare alla colonna pi\u00f9 a destra; PageDown oppure Control + Shift + f , una pagina in gi\u00f9; PageUp oppure Control + Shift + b , una pagina in alto. NOTA BENE : g \u00e8 il tasto per i comandi \"globali\". Per muoversi tramite ricerca testuale, sfruttando le espressioni regolari: / + regex , cerca in avanti nella colonna corrente; ? + regex , cerca indietro nella colonna corrente; g/ + regex , cerca in avanti in tutte le colonne; g? + regex , cerca indietro in tutte le colonne; Con n e N si va avanti e indietro rispetto agli elementi di output del risultato della ricerca. Infine per saltare a una determinata riga o colonna, rispettivamente zr e zc seguito dal numero di riga e colonna (la numerazione inizia da zero).","title":"Navigare tra i dati"},{"location":"guida/#i-fogli","text":"In VisiData ci sono tre tipi di fogli: i fogli sorgente, con i dati che si \u00e8 scelto di aprire con VisiData; i fogli derivati, come quelli derivanti da filtraggio o la tabelle con le frequenze (vedi sotto); i metafogli, che descrivono e definiscono i dataset caricati (come quello che descrive ad esempio le colonne di una tabella, o il \"foglio dei fogli\"). Il \"foglio dei fogli\" si apre con Shift + s e fornisce l'elenco (e alcune informazioni correlate) di tutti i fogli aperti. Selezionandone uno e pigiando Invio , quest'ultimo si aprir\u00e0. Per rinominarne uno dal \"foglio dei fogli\", basta selezionarlo, premere e e inserire il nuovo nome e poi dare Invio . O in alternativa, se si \u00e8 davanti al foglio che si vuole rinominare, premere la barra spaziatrice , scrivere rename-sheet , digitare il nuovo nome e infine pigiare su Invio . Il foglio correntemente aperto si chiude con q .","title":"I fogli"},{"location":"guida/#lavorare-sulle-righe","text":"La cosa pi\u00f9 importante da comprendere \u00e8 come selezionarle e deselezionarle, perch\u00e9 molte delle operazioni vengono eseguite proprio su quelle selezionate. I tasti principali di selezione sono: s , per selezionare la riga corrente; u , per deselezionare la riga corrente; t , per invertire la selezione della riga corrente; gs , per selezionare tutte le righe; gu , per deselezionare tutte le righe; gt , per invertire i criteri di selezione per tutte le righe.","title":"Lavorare sulle righe"},{"location":"guida/#selezione-di-righe-tramite-espressione-regolare","text":"| + termine da ricercare , seleziona tutte le righe in cui c'\u00e8 corrispondenza per la colonna corrente; \\ + termine da ricercare , deseleziona tutte le righe in cui c'\u00e8 corrispondenza per la colonna corrente; g| + termine da ricercare , seleziona tutte le righe in cui c'\u00e8 corrispondenza per una qualsiasi colonna; g\\ + termine da ricercare , deseleziona tutte le righe in cui c'\u00e8 corrispondenza per una qualsiasi colonna; , , dato il valore della cella selezionata, seleziona tutte le righe in cui per la colonna corrente c'\u00e8 corrispondenza; g, , seleziona tutte le righe uguali a quelle corrente. Se ad esempio: ci si sposta nella colonna provincia_residenza poi si pigia | ; si digita TERAMO ; si preme Invio . ... si ottiene qualcosa come quella di sotto.","title":"Selezione di righe tramite espressione regolare"},{"location":"guida/#selezione-di-righe-tramite-espressioni-python","text":"\u00c8 possibile fare una selezione di righe tramite un'espressione di Python ( qui per approfondire sui concetti di base delle espressioni). I comandi da tastiera sono: z| , per selezionare tutte le righe in cui l'espressione \u00e8 valida; z\\ , per deselezionare tutte le righe in cui l'espressione \u00e8 valida. Ad esempio seguendo questi step: gu , per deselezionare tutto; z| , per attivare la selezione tramite espressione Python; scrivendo provincia_residenza == \"PESCARA\" and sesso == \"F\" ; e pigiando su Invio . ... verranno selezionati tutti gli elementi in cui la provincia \u00e8 \"Pescara\" ed il sesso \u00e8 \"F\".","title":"Selezione di righe tramite espressioni Python"},{"location":"guida/#selezione-di-righe-tramite-espressioni-python-e-regex","text":"si digita z| ; si scrive l'espressione, come ad esempio re.search(\"^1\", FieldB) and re.search(\"^2\", FieldA) , ovvero tutte le righe in cui il campo FieldB inizia per 1 e il campo FieldA per 2 .","title":"Selezione di righe tramite espressioni Python e regex"},{"location":"guida/#selezionare-un-numero-random-di-righe","text":"aprire una tabella; fare click sulla barra spaziatrice; scrivere random-rows (si pu\u00f2 scrivere anche soltanto ad esempio ran e autocompletare con TAB ) e premere INVIO ; scrivere il numero di righe random che si vogliono selezionare.","title":"Selezionare un numero random di righe"},{"location":"guida/#spostare-righe","text":"Si fa con queste combinazioni: Shift+j , per spostare la riga corrente verso il basso; Shift+k , per spostare la riga corrente verso l'alto.","title":"Spostare righe"},{"location":"guida/#cancellare-righe","text":"d per cancellare la riga corrente; gd per cancellare le righe selezionate.","title":"Cancellare righe"},{"location":"guida/#modificare-il-contenuto","text":"Questi i comandi di base: e , per modificare la cella corrente; Enter , per chiudere la modifica; Control+c , per cancellare la modifica; Control+a , per andare a inizio linea; Control+e , per andare a fine linea; Control+k , per cancellare il contenuto a partire dalla posizione del cursore.","title":"Modificare il contenuto"},{"location":"guida/#lavorare-sulle-colonne","text":"Ogni colonna in VisiData ha 3 attributi principali: Name , il nome della colonna; Width , la larghezza a schermo della colonna (se impostata a 0, la colonna diventa invisibile); Type , per definire se contiene testi, numeri interi, numeri decimali, monete o date.","title":"Lavorare sulle colonne"},{"location":"guida/#il-foglio-delle-colonne","text":"In VisiData esistono i cosiddetti meta-fogli (vedi sopra ): uno di questi \u00e8 il foglio delle colonne, che elenca tutte le colonne e i relativi attributi di una tabella. A partire dalla visualizzazione di una tabella, si apre con Shift+c . \u00c8 una delle caratteristiche di VisiData che consente una rapida prima lettura del dato, che personalmente uso anche ad esempio per costruire brevi relazioni che contengono schema dati.","title":"Il foglio delle colonne"},{"location":"guida/#impostare-il-tipo-di-campo","text":"Come impostazione predefinita VisiData imposta a \"testo\" la tipologia di tutti i campi (che \u00e8 quello che faccio di solito anche io alla prima apertura sia in un foglio elettronico che in Pandas). Per definire il tipo di campo di una colonna della tabella che si sta visualizzando (cosa che consente di fare correttamente ad esempio operazioni di ordinamento, matematiche, ecc.), si deve navigare sino alla colonna su cui si vuole intervenire e poi pigiare: # , per definire un campo con numeri interi (0, -1, 5000000) % , per definire un campo con numeri decimali (0.5, -3.14, 23.45557) $ , per definire un campo con monete ($4.99, \u20ac20) @ , per definire un campo con date (2018-04-06, April 6, 2018, 04/06/2018) ~ , per definire un campo di testo (qualsiasi cosa!)","title":"Impostare il tipo di campo"},{"location":"guida/#impostare-numero-di-decimali-in-un-campo-floating","text":"Di default i campi floating sono renderizzati con due decimali (la formattazione \u00e8 impostata come %.02f ). Per modificare la cosa si pu\u00f2 aprire il foglio delle colonne ( SHIFT+c ) e modificare il valore di formattazione delle colonna fmtstr (vedi sotto). Per passare a tre decimali per un campo, baster\u00e0 ad esempio modificare la cella della colonna di interesse da %.02f a %.03f (in edit di cella si va con il tasto e ). Se si vuole fare su pi\u00f9 colonne: si apre sempre il foglio delle colonne; si selezionano le colonne di cui si vuole cambiare la formattazione; si va sulla colonna fmtstr ; si va in modifica globale con ge e si inserisce il valore di formattazione desiderato; si preme INVIO per applicare la modifica.","title":"Impostare numero di decimali in un campo floating"},{"location":"guida/#impostare-formato-data-personalizzato","text":"Se una cella contiene ad esempio la data 06/11/2020 (qui come 6 novembre 2020), e imposto la colonna come data con il tasto @ , visidata la interpreta come 2020-06-11 , ovvero come 11 giugno. Per impostarla correttamente bisogna impostare un formato data personalizzato: si va sulla colonna con le date; si digita z@ e si preme INVIO ; si imposta il formato - in questo caso %d/%m/%Y - e si preme INVIO . In output si avr\u00e0 2020-11-06 .","title":"Impostare formato data personalizzato"},{"location":"guida/#rinominare-le-colonne","text":"Per farlo si naviga sino alla colonna che si vuole rinominare e poi: si pigia ^ ; si digita il nome che si vuole assegnare; si pigia Invio .","title":"Rinominare le colonne"},{"location":"guida/#rinominare-le-colonne-in-blocco","text":"Pu\u00f2 essere utile ad esempio anteporre dei caratteri a tutte le colonne che iniziano per t . Questi i passi: si apre il foglio colonne con shift + c ; si va nella colonna con il nome delle colonne (\u00e8 la prima); si digita | , si scrive ^t e si pigia INVIO (saranno selezionate tutte le colonne che iniziano con il carattere t ); si pigia g* , per attivare il trova e sostituisci via regex ; si scrive ^(t.+)/TR_\\1 e poi INVIO . Tutte le colonne che iniziano per t , avranno un nuovo nome corrispondente al precedente, con TR_ come prefisso. La colonna tabacco , diventerebbe ad esempio TR_tabacco .","title":"Rinominare le colonne in blocco"},{"location":"guida/#come-espandere-ridurre-e-rimuovere-colonne","text":"Questi gli shortcut: _ , per espandere la larghezza della colonna corrente, alla larghezza massima del testo contenuto nella stessa, tenendo conto delle righe visualizzate a schermo; g_ , per espandere la larghezza di tutte le colonne, alla larghezza massima del testo contenuto, tenendo conto delle righe visualizzate a schermo; z_ + n , per impostare la larghezza della colonna corrente a n caratteri; - , per nascondere la colonna corrente (viene impostata a 0 la sua larghezza); gv , per scoprire tutte le colonne nascoste; z- , per ridurre la larghezza della colonna corrente alla sua met\u00e0.","title":"Come espandere, ridurre e rimuovere colonne"},{"location":"guida/#spostare-una-colonna","text":"Ecco come farlo: Shift+h , sposta la colonna corrente di una posizione a sinistra; Shift+l , sposta la colonna corrente di una posizione a destra.","title":"Spostare una colonna"},{"location":"guida/#modificare-una-colonna-tramite-unespressione-python","text":"A questa tabella si vuole assegnare al campo FieldA il valore di FieldB , tutte le volte che FieldA \u00e8 vuoto. FieldA FieldB 1 3 1 12 Questa la procedura: gs per selezionare tutte le righe; g= per scrivere l'espressione Python; aggiungere come espressione FieldB if FieldA==\"\" else FieldA . Ovvero ( FieldA ) \u00e8 uguale FieldB se FieldA non contiene nulla, altrimenti \u00e8 uguale a se stesso (rimane invariato).","title":"Modificare una colonna tramite un'espressione Python"},{"location":"guida/#calcoli-per-colonna","text":"\u00c8 possibile avere restituito, per una colonna, il risultato di uno dei calcoli di aggregazione disponibili: Ad esempio per avere la somma dei valori di una colonna con numeri interi: si imposta il tipo di colonna a numero intero (con # ); si digita z+ e poi INVIO ; si digita sum e poi INVIO . In basso, si legger\u00e0 il valore risultante. NOTA BENE : se nessuna riga \u00e8 selezionata si avr\u00e0 il totale per colonna, altrimenti il calcolo sar\u00e0 applicato per colonna alle sole righe selezionate.","title":"Calcoli per colonna"},{"location":"guida/#come-definire-una-colonna-chiave","text":"Per ogni foglio \u00e8 possibile definire una o pi\u00f9 colonne chiave. Hanno due funzioni principali: rimangono fissate sul lato sinistro, quando si naviga orizzontalmente sulla tabella; hanno una funzione speciale quando si fanno certe operazioni (come quelle di JOIN , per alcuni conteggi, ecc.). Per definire una colonna chiave (e vice-versa) si naviga sino alla colonna di interesse e si pigia ! .","title":"Come definire una colonna chiave"},{"location":"guida/#manipolare-le-colonne-dal-foglio-delle-colonne","text":"Il foglio delle colonne oltre a dare una visione di insieme, consente di fare delle rapide modifiche in blocco. \u00c8 possibile spostare le colonne con Shift+j e Shift+k , rinominarle con e , impostare il tipo per tutte quelle selezionate, impostare la larghezza per tutte quelle selezionate. Ad esempio a partire dal Parco Circolante dei veicoli dell'Abruzzo, il foglio colonne ( Shift+c ) appare in questo modo. Se si vuole impostare a \"numero intero\" le colonne progressivo e eta_intestatario , bisogner\u00e0 prima selezionarle con s . Poi premere g# .","title":"Manipolare le colonne dal foglio delle colonne"},{"location":"guida/#creare-una-nuova-colonna","text":"Sono tre le modalit\u00e0 pi\u00f9 comode: come risultato di un'espressione Python; come risultato di un comando di split ; come risultato di estrazione di una porzione di testo da una colonna.","title":"Creare una nuova colonna"},{"location":"guida/#nuova-colonna-tramite-espressione","text":"Ad esempio potrebbe essere utile creare una colonna vero/falso, per tutte le auto del Parco Circolante dei veicoli dell'Abruzzo, con cilindrata maggiore ai 643 (\u00e8 un numero a caso). Per farlo: navigare sino alla colonna cilindrata ; premere % per impostarla come numero decimale; pigiare su = ; nel prompt in basso a sinistra scrivere cilindrata > 643 ; premere Invio . In output qualcosa come quella di sotto, con la nuova colonna risultato di un'espressione Python.","title":"Nuova colonna tramite espressione"},{"location":"guida/#nuove-colonne-come-risultato-di-splitting","text":"Si possono creare nuove colonne, come risultato di una suddivisione di una gi\u00e0 esistente. Ad esempio nel campo data_immatricolazione \u00e8 contenuta sia la data che l'orario, separati da spazio (i.e. 1995-04-03 00:00:00 ). Se si vuole suddividerla in due colonne (data e orario), si pu\u00f2 procedere in questo modo: si naviga sino alla colonna data_immatricolazione ; si preme : ; si sceglie la stringa di testo (definibile anche come espressione regolare) da usare come separatore e si scrive in basso a sinistra nel prompt . In questo caso \u00e8 lo spazio; si digita quindi lo spazio e si d\u00e0 Invio . Come output si avr\u00e0 qualcosa come quella di sotto: due colonne frutto della divisione in pi\u00f9 colonne, sfruttando come separatore lo spazio.","title":"Nuove colonne come risultato di splitting"},{"location":"guida/#nuove-colonne-come-risultato-di-cattura-e-estrazione","text":"Per farlo ci vogliono delle conoscenze di base sulle espressioni regolari (che sono una conoscenza propedeutica per chiunque lavori con i dati). Se si vuole ad esempio estrarre l'anno dalla celle che contiene il valore 1995-04-03 00:00:00 , baster\u00e0 definire l'espressione regolare che estrae a partire dall'inizio della cella i primi 4 numeri. Che in termini di espressione regolare \u00e8 ^[0-9]{4} . Per creare una nuova colonna a partire dalla definizione di un'espressione regolare da usare come \"estrattore\", si procede in questo modo: si naviga sulla colonna data_immatricolazione ; si pigia ; ; si scrive nel prompt in basso a sinistra ^([0-9]{4}) . Sono state inserite le parentesi tonde, perch\u00e9 la cattura si fa a partire dalla definizione di un gruppo; si pigia Invio . E si ottiene qualcosa come quella di sotto:","title":"Nuove colonne come risultato di cattura e estrazione"},{"location":"guida/#trasformare-una-colonna-tramite-espressione-regolare-trova-e-sostituisci","text":"Su ogni colonna \u00e8 possibile fare delle trasformazioni basate su espressioni regolari. Se ad esempio si vogliono rimuovere dalle celle della colonna data_immatricolazione le informazioni sull'orario e passare quindi da 1995-04-03 00:00:00 a 1995-04-03 si pu\u00f2 procedere in questo modo: si selezionano le righe su cui si vuole fare questa trasformazione (se sono tutte il comando \u00e8 gs ); si va nella colonna data_immatricolazione ; si pigia su g* ; si scrive nel prompt .*$/ . Il simbolo / in VisiData separa ci\u00f2 che si cerca, da ci\u00f2 con cui si vuole sostituire. Qui si cerca uno spazio ( ), seguito da qualsiasi carattere sino a fine cella ( .*$ ), e si vuole sostituire con nulla; si pigia Invio (ci vorr\u00e0 un po' di tempo, sono pi\u00f9 di un milione di righe). Il risultato sar\u00e0 qualcosa come quella di sotto: Questo \u00e8 un \"trova e sostituisci\" per colonna.","title":"Trasformare una colonna tramite espressione regolare (trova e sostituisci)"},{"location":"guida/#il-foglio-delle-frequenze","text":"Questa \u00e8 una delle funzioni che uso di pi\u00f9 ed \u00e8 un'altra gran bell'idea. A partire da una colonna (o dalla combinazione di pi\u00f9 d'una) \u00e8 possibile - con Shift+f - aprire un foglio derivato, che contiene dei dati relativi al conteggio per valori distinti di quanto contenuto in quella colonna. Se per esempio a partire dal Parco Circolante dei veicoli dell'Abruzzo, si volesse avere un'idea sulla distribuzione per \"marca\", basta navigare in vista tabella sino a quella colonna e poi pigiare Shift+f e avere qualcosa come quella di sotto. I dati sono ordinati per conteggio ed emerge subito come una famosa marca nazionale da sola faccia \u00bc del campione. Cos\u00ec come emerge che c'\u00e8 un 5% di elementi in cui la marca non \u00e8 definita e anche questa \u00e8 un'informazione che ci potrebbe consentire da subito di prendere delle decisioni. Molto comoda anche la colonna histogram che da visivamente in modo molto diretto un'idea del rapporto tra i numeri descritti in tabella.","title":"Il foglio delle frequenze"},{"location":"guida/#lavorare-sulle-celle","text":"","title":"Lavorare sulle celle"},{"location":"guida/#fare-un-trova-e-sostituisci-globale","text":"Si parte dal selezionare le righe su cui si vuole eseguire l'operazione (se sono tutte il comando \u00e8 gs ). Digitare gz* e poi scrivere stringa da trovare / stringa da sostituire e dare INVIO . Se ad esempio volessi sostituire la stringa pal con mis , dovrei scrivere pal/mis . \u00c8 possibile usare anche le espressioni regolari.","title":"Fare un trova e sostituisci globale"},{"location":"guida/#ordinare-e-filtrare","text":"","title":"Ordinare e filtrare"},{"location":"guida/#ordinare-righe","text":"I tasti [ e ] ordinano i dati rispettivamente in modo crescente e decrescente, a partire dalla colonna attiva.","title":"Ordinare righe"},{"location":"guida/#filtrare-righe","text":"\u00c8 possibile estrarre in vari modi un campione delle righe della tabella visualizzata. Quello di base \u00e8 a partire dalla selezione delle righe (in uno dei modi visti sopra) e poi pigiare \" . Ad esempio si naviga sino alla colonna marca , si preme | , si scrive chevr , si pigia Invio (vengono selezionati tutti i record associati a CHEVROLET ) e infine si preme \" . Si avr\u00e0 una tabella filtrata, con gli 8814 record relativi a questa marca per l'Abruzzo. Oppure posso farlo a partire da un \"foglio delle frequenze\" (vedi qui ): si naviga sino alla colonna marca ; si pigia Shift+f , che mi da in output il conteggio dei valori distinti per marca (sono pi\u00f9 di un milione di record, ci vorr\u00e0 un po' di tempo); si scorre sino alla riga che contiene la marca che si vuole filtrare; si pigia Invio e si avr\u00e0 una tabella filtrata, con i record relativi a quella marca per l'Abruzzo. Dal foglio delle frequenze \u00e8 possibile filtrare su pi\u00f9 di un elemento: si selezionano ad esempio tre marche, pigiando s per ognuna; si chiude il foglio delle frequenze con q e si torna al foglio dati; si pigia \" e si ottiene una tabella filtrata con i dati relativi alle sole tre marche selezionate prima.","title":"Filtrare righe"},{"location":"guida/#filtro-tramite-espressione-python","text":"\u00c8 possibile filtrare righe tramite un' espressione Python ( qui la documentazione ufficiale e qui una guida che consiglio). Se ad esempio dalla tabella di sotto si volessero soltanto le province con pi\u00f9 di 350.000 abitanti basterebbe: per prima cosa impostare il campo Popolazione come numerico, pigiando # ; pigiare z| per attivare il filtro tramite espressione Python; scrivere l'espressione basata sulla colonna, che qui \u00e8 Popolazione>350000 e poi premere INVIO . In output si avr\u00e0 la selezione di tutte le righe che risolvono l'espressione scritta. Note: nel filtro per espressione c'\u00e8 l'autocompletamento del nome colonna, quindi se si scrive ad esempio Pop e poi si fa click su TAB , viene restituito a schermo Popolazione ; \u00e8 possibile scrivere espressioni complesse, che fanno riferimento a pi\u00f9 colonne.","title":"Filtro tramite espressione Python"},{"location":"guida/#filtro-tramite-espressione-python-su-campo-datetime","text":"\u00c8 possibile filtrare righe tramite un'espressione Python a partire da campi datetime , dopo averli impostare come data. Usando questo file CSV (by PCM-DPC ), se ad esempio dalla tabella di sotto si volessero soltanto i record con giorno 29: basterebbe: per prima cosa impostare il campo data come data, pigiando @ ; pigiare z| per attivare il filtro tramite espressione Python; scrivere l'espressione basata sulla colonna, che qui \u00e8 data.day == 29 e poi premere INVIO . In output si avr\u00e0 la selezione di tutte le righe che risolvono l'espressione scritta. Osservazioni: oltre a day \u00e8 possibile usare: month , year e hour Se si vogliono ad esempio selezionare soltanto righe con date nel futuro, l'espressione sar\u00e0 data > datetime.datetime.now() .","title":"Filtro tramite espressione Python su campo datetime"},{"location":"guida/#filtri-tramite-espressioni-python-basati-su-piu-colonne","text":"Si vogliono ad esempio selezionare tutte le righe in cui il domicilio non \u00e8 n\u00e9 a Palermo, n\u00e9 a Ragusa, ma la cui residenza \u00e8 in una di queste due citt\u00e0. A partire ad esempio da: domicilio residenza PA PA RG RG TO TO VE PA Questa la procedura: pigiare z| per selezionare tramite espressione Python; scrivere re.search(\"^(?!PA|RG).*\", domicilio) and re.search(\"(PA|RG)\", residenza) ; premere INVIO . La prima \u00e8 una speciale condizione di regex , che cerca al negativo. Sar\u00e0 selezionata soltanto la riga seguente: domicilio residenza VE PA","title":"Filtri tramite espressioni python, basati su pi\u00f9 colonne"},{"location":"guida/#riepilogo-dei-dati","text":"Uno dei modi per avere un riepilogo \u00e8 usare il foglio delle frequenze (vedi qui ). \u00c8 possibile generare un foglio delle frequenze anche basato su pi\u00f9 colonne. Per farlo si impostano come colonne chiave ( qui come fare) quelle che si vogliono trasformare in \"foglio delle frequenze\", e poi si pigia g+Shift+f . Qui sotto ad esempio un riepilogo per le coppie univoche di destinazione/alimentazione .","title":"Riepilogo dei dati"},{"location":"guida/#aggiunta-di-aggregatori","text":"I fogli di frequenza, oltre al conteggio per valori distinti, possono contenere altri calcoli. Gli \"aggregatori\" possibili sono min , max , avg / mean , median , q3/q4/q5/q10 (terzili/quartili/quintili/decili), sum , distinct , count e keymax . Ad esempio per ogni provincia si pu\u00f2 avere restituito la distribuzione di et\u00e0 per quartile e scoprire che il 50% del campione \u00e8 compreso nella fascia di et\u00e0 tra i 18 e circa i 55 anni. Per aggiungere l'aggregatore q4 al foglio delle frequenze, bisogna seguire questi passi: navigare sino alla colonna eta_intestatario e impostarla a numero intero con # ; premere + e scrivere (in basso a sinistra) q4 (per il calcolo dei quartili, quindi al 25, 50 e 75 percento); navigare sino alla colonna provincia_residenza e pigiare Shift+f . Inizier\u00e0 da subito il calcolo (che non \u00e8 immediato, sono pi\u00f9 di un milione di righe) e alla fine si avr\u00e0 qualcosa come l'immagine di sopra (non \u00e8 fico VisiData?).","title":"Aggiunta di aggregatori"},{"location":"guida/#il-riepilogo-globale","text":"Per avere una visione a \"volo d'uccello\" sull'intera tabella esiste il comando Shift+i , che restituisce un riepilogo statistico per tutte le colonne. Se prima di lanciarlo si definiscono correttamente i campi (ad esempio i numerici, come numerici), verranno eseguiti correttamente anche i calcoli per min , max , median , mean , stdev . Questa \u00e8 un'altra feature di grande comodit\u00e0 (presente in molte applicazione e ambienti per analisi dati), che verr\u00e0 usata molto da chi lavorer\u00e0 con VisiData.","title":"Il riepilogo globale"},{"location":"guida/#salvare-un-foglio","text":"Per salvare un foglio si preme CTRL+s , poi si scrive il nome del file con estensione ( nomeEsempio.csv ) e infine si pigia Invio .","title":"Salvare un foglio"},{"location":"guida/#fare-il-redirect-delloutput-verso-lo-stdout","text":"Il comando vd input.csv -b --save-filetype json | jq . invier\u00e0 ad esempio a jq un output JSON a partire dal CSV di input . Se ad esempio si vuole passare l'output a grep: vd input.csv -b --save-filetype tsv 2> /dev/null | grep 'a' 2> /dev/null per non avere stderr a schermo.","title":"Fare il redirect dell'output verso lo stdout"},{"location":"guida/#fare-join-tra-tabelle","text":"Se ad esempio si volesse calcolare il rapporto tra numero di mezzi e popolazione, sarebbe utile fare un JOIN con una tabella con i dati della popolazione residente. I dati per provincia sono quelli di sotto e sono stati salvati in un file TSV denominato popolazioneAbruzzo.tsv (fonte ISTAT ). Provincia Popolazione L'AQUILA 300404 TERAMO 308284 PESCARA 319388 CHIETI 387120 Si pu\u00f2 fare in questo modo: si parte da vd parco_circolante_Abruzzo.csv ; si va sulla colonna provincia_residenza ; si calcola il foglio delle frequenze pigiando Shift+f e si ottiene si rinomina questo foglio frequenze premendo la barra spaziatrice, scrivendo il comando rename-sheet e dando poi Invio . E poi inserendo il nome nuovo (ad esempio mezziProvincia ); si apre la tabella con i dati sulla popolazione per provincia, pigiando o , scrivendo popolazioneAbruzzo.tsv (che \u00e8 il nome del file) e pigiando Invio (NOTA BENE si pu\u00f2 scrivere anche soltanto popo e poi pigiare TAB e il nome del file verr\u00e0 autocompletato). Si otterr\u00e0 si va nella colonna Provincia e si preme ! per impostarla come colonna chiave. Il JOIN in VisiData viene fatto tra colonne chiave; si apre il \"foglio dei fogli\" con Shift+s e si visualizzer\u00e0 qualcosa come; si va nella riga che contiene lo sheet popolazioneAbruzzo e si pigia INVIO ; si va di nuovo nella colonna Provincia e si preme ! per impostarla come colonna chiave; si apre il \"foglio dei fogli\" con Shift+s ; si selezionano con s le due tabelle mezziProvincia e popolazioneAbruzzo ; si pigia & che \u00e8 il comando di JOIN e in basso a sinistra ci viene chiesto quale tipo si vuole applicare ( nota bene : con VisiData >2.0 si deve premere CTRL + x e scegliere il tipo di JOIN ); si scrive inner e si pigia Invio e si ottiene una tabella che contiene sia il numero di mezzi per provincia, che il numero di abitanti. Da questa tabella a questo punto, semplificando un po', si potrebbe rapidamente calcolare il numero macchine per persona, in questo modo: si va nella colonna Popolazione e si preme # per impostarla come numero intero; si pigia = (per creare una nuova colonna con valori frutto di un'espressione); si scrive poi nel prompt count/Popolazione (c'\u00e8 l'autocompletamento con TAB dei nomi delle colonne); e si ottiene un risultato come quello di sotto.","title":"Fare JOIN tra tabelle"},{"location":"guida/#concatenare-tabelle","text":"La concatenazione tra due o pi\u00f9 tabelle con la stessa struttura si attiva tramite & . Ad esempio, a partire dai due file inputFileOne.csv e inputFileTwo.csv , presenti qui si procede in questo modo: si apre la shell e si va nella cartella che contiene i file da concatenare; si scrive vd e si preme Invio ; si seleziona la prima voce DirSheet for the current directory e si preme invio ; si selezionano con s i due file; si preme g Invio per aprirli entrambi; si apre il foglio dei fogli con Shift+s ; si selezionano inputFileOne.csv e inputFileTwo.csv con s ; si preme & per attivare la concatenazione; si preme Ctrl+X per il menu; si seleziona append e poi si preme Invio . Si avr\u00e0 a video l'unione dei due file di input (in questo video una replica di quanto descritto, per versioni vd < 2 ).","title":"Concatenare tabelle"},{"location":"guida/#tabelle-pivot","text":"Ecco ad esempio come creare quella che da conto del numero di mezzi per marca, suddivisi per provincia: si va nella colonna marca e si imposta come colonna chiave, premendo ! ; si va poi nella colonna provincia_residenza e si pigia Shift+w ; si ottiene la tabella pivot desiderata. Se invece del conteggio delle occorrenze si volesse (a partire da un altro campo) calcolare un altro dato aggregato - come ad esempio l'et\u00e0 media per marca e provincia - si pu\u00f2 procedere in questo modo: si va nella colonna eta_intestatario e si imposta a numero intero, pigiando su # ; si preme + , poi in basso a sinistra nel prompt si scrive avg e infine si d\u00e0 Invio ; si va di nuovo nella colonna provincia_residenza e si pigia Shift+w . In output, per ogni provincia, si avr\u00e0 quindi la media desiderata.","title":"Tabelle Pivot"},{"location":"guida/#creare-un-grafico-di-dispersione-scatter-plot","text":"VisiData pu\u00f2 stampare a schermo anche dei grafici XY. Non \u00e8 un suo punto di forza, ma pu\u00f2 essere utile per avere una prima e grezza visualizzazione spaziale dell'insieme dei dati. Il requisito per crearne uno, \u00e8 avere due colonne numeriche, da usare come coppia di coordinate. Qualcosa come quella di sotto. fid X Y 1 12.29 43.76 2 12.16 43.64 3 12.15 43.65 4 12.16 43.63 ... ... ... Per generare il grafico baster\u00e0 seguire i seguenti passi: impostare come numeriche (numeri decimali digitando % sulla colonna, o # per numeri interi) le due colonne con le coordinate; impostare come colonna chiave la colonna con le ascisse, selezionandola e digitando ! ; selezionare la colonna con le ordinate e digitare . . In output si avr\u00e0 qualcosa come quella di sotto","title":"Creare un grafico di dispersione (scatter plot)"},{"location":"guida/#moduli-python","text":"VisiData \u00e8 un foglio elettronico basato su Python 3. Questo consente di utilizzare al suo interno la galassia dei moduli disponibili per Python. Per farlo, bisogna precaricare questi moduli all'avvio di VisiData. Questo si realizza modificando il file di configurazione del programma - si chiama .visidatarc - contenuto nella cartella home dell'utente. Se si vuole ad esempio sfruttare il modulo datetime , si apre in modifica il file .visidatarc e si aggiunge la riga from datetime import datetime Poi si salva il file e si fa partire VisiData. Se ad esempio si vuole fare un'analisi sulla data di immatricolazione per mese a partire dalla colonna data_immatricolazione e si volesse sfruttare il modulo datetime , si pu\u00f2 procedere in questo modo: si va nella colonna data_immatricolazione ; si preme = ; si scrive nel prompt datetime.strptime(data_immatricolazione, '%Y-%m-%d %H:%M:%S').month e si pigia Invio . Si ottiene qualcosa come quella di sotto: E a questo punto si pu\u00f2 rinominare la colonna premendo ^ , scrivendo \"mese\" e poi premendo Invio . E poi creare il foglio delle frequenze della colonna mese , pigiando Shift+f e scoprire che in Abruzzo si immatricola soprattutto a gennaio. NOTA BENE : le funzioni del modulo datetime sono disponibili in modo nativo per le colonne gi\u00e0 impostate (come tipo) a data. Quanto scritto sopra vale soprattutto come guida al come precaricare e utilizzare un modulo Python in VisiData.","title":"Moduli Python"},{"location":"guida/#salvare-un-flusso-di-lavoro","text":"","title":"Salvare un flusso di lavoro"},{"location":"guida/#introduzione","text":"In VisiData \u00e8 possibile salvare il log delle operazione fatte e riutilizzarlo per applicarle nuovamente al file di input. Se ad esempio a partire da questo file CSV (sotto l'anteprima) si volessero cancellare tutte le righe che contengono il solo carattere a nella prima colonna e infine salvare l' output , la procedura \u00e8: vd input.csv ; posizionarsi nella prima colonna e pigiare | per attivare la selezione tramite espressione regolare, scrivere ^a$ e premere INVIO . Verr\u00e0 fatta la selezione descritta; pigiare in sequenza g e d per cancellare le righe selezionate; poi CTRL+s ; e infine scegliere un nome di output (ad esempio output.csv ) e pigiare INVIO per salvare il file. field1 field2 a 0 b 3 a 4 c 5 Per salvare la procedura di sopra in un file di log, bisogner\u00e0 premere CTRL+d , scegliere un nome per salvare il file (ad esempio cancella_le_a.vd ) e pigiare INVIO . Il file di log salvato avr\u00e0 un contenuto come quello sottostante ( \u00e8 un file TSV ), in cui sono \"mappate\" tutte le operazioni fatte: sheet col row longname input keystrokes comment global null_value set-option open-file input.csv o input field1 select-col-regex ^a$ input delete-selected gd delete (cut) selected rows and move them to clipboard input save-sheet output.csv ^S save current sheet to filename in format determined by extension (default .tsv) Per riapplicare la stessa procedura al file, senza interagire con lo schermo, il comando da lanciare \u00e8: vd -b -p cancella_le_a.vd -b per eseguire VisiData senza attivarne l'interfaccia; -p per replicare un file di log. Se questo comando si lancia dopo avere gi\u00e0 creato il file di output , si avr\u00e0 un messaggio di errore, che avvisa che il file esiste gi\u00e0 e non pu\u00f2 essere sovrascritto. Per fare in modo che venga sovrascritto bisogner\u00e0 aggiungere l'opzione -y : vd -y -b -p cancella_le_a.vd A schermo verr\u00e0 restituito l'elenco delle operazione svolte: opening cancella_le_a.vd as vd \"input.csv\" opening input.csv as csv select rows matching regex in current column \"^a$\" search wrapped 2 matches for /^a$/ selected 2 rows delete (cut) selected rows and move them to clipboard copied 2 rows to clipboard deleted 2 rows save current sheet to filename in format determined by extension (default .tsv) \"output.csv\" saving 1 sheets to output.csv as csv replay complete","title":"Introduzione"},{"location":"guida/#applicare-lo-stesso-flusso-a-un-file-diverso-ma-omologo","text":"Spesso si ha la necessit\u00e0 di applicare una stessa procedura ad altri file , con la stessa struttura , ma con contenuti differenti . Per utilizzare il file di log creato con un file diverso da input.csv , bisogner\u00e0 modificare il file di log (si modifica con qualsiasi editor di testo): rimuovere la riga con il riferimento a input.csv rimuovere il riferimento al nome del foglio (qui \u00e8 input , come il nome del file). Diventer\u00e0 quindi: sheet col row longname input keystrokes comment global null_value set-option field1 select-col-regex ^a$ delete-selected gd delete (cut) selected rows and move them to clipboard save-sheet output.csv ^S save current sheet to filename in format determined by extension (default .tsv) Fatto questo, il comando da usare con un nuovo file denominato ad esempio input_nuovo.csv sar\u00e0: vd -y -b -p cancella_le_a.vd input_nuovo.csv In output verr\u00e0 creato il file output.csv . Se si vuole creare un file di output con nome diverso, si deve cancellare dal file di log la riga in cui si fa riferimento a output.csv e lanciare il comando: vd -y -b -p cancella_le_a.vd input_nuovo.csv -o output_nuovo.csv","title":"Applicare lo stesso flusso a un file diverso, ma omologo"},{"location":"guida/#nota-sul-file-di-log","text":"Si tratta di un TSV, quindi \u00e8 possibile leggerlo e modificarlo proprio con VisiData :","title":"Nota sul file di log"},{"location":"guida/#soluzione-problemi","text":"","title":"Soluzione problemi"},{"location":"guida/#riga-attiva-di-colore-nero","text":"Quando si usa VisiData su Windows Subsystem for Linux, la riga attiva risulta invisibile perch\u00e9 tutta nera. Per fare in modo che torni \"visibile\" bisogna modificare il file di configurazione di VisiData. Questo file di default non esiste: si deve trovare nella home dell'utente (quindi in ~ ) e si deve nominare come .visidatarc . Questi i passi: ## vai nella cartella home dell'utente cd ~ ## nano \u00e8 un editor di testo, si installa con \"sudo apt-get install nano. ## Si pu\u00f2 esare usare qualsiasi editor per modificare il file nano .visidatarc Si aprir\u00e0 il file .visidatarc a cui bisogner\u00e0 aggiungere le stringhe sottostanti e poi salvare il file. options.color_key_col='' options.color_selected_row='yellow' options.color_note_type='yellow' options.color_graph_hidden='blue' options.color_column_sep='blue' options.null_value=\"\" options.color_key_col=\"blue\"","title":"Riga attiva di colore nero"},{"location":"guida/#caratteri-non-leggibili-in-windows-subsystem-for-linux","text":"Se si usa VisiData in Windows Subsystem for Linux, alcuni caratteri possono risultare non leggibili. Questo dipende dal font usato. Per cambiarlo: click con il destro del mouse sulla barra; e scegliere Propriet\u00e0. Infine si consiglia il font di sotto:","title":"Caratteri non leggibili in Windows Subsystem for Linux"},{"location":"guida/#ricette","text":"","title":"Ricette"},{"location":"guida/#salvare-una-tabella-html-in-csv-a-partire-da-una-pagina-web","text":"In questo esempio il presupposto \u00e8 che si voglia trasformare in CSV una tabella HTML presente in una pagina web, in cui ci sono pi\u00f9 tabelle. Il punto di partenza \u00e8 quello di estrarre dalla pagina sorgente, una pagina HTML che contiene soltanto la tabella di interesse. La pagina di esempio \u00e8: https://web.archive.org/web/20190618071304/http://www.sias.regione.sicilia.it/NHEOWLH140_00_1.html Questa \u00e8 composta da diverse tabelle. Quella di interesse \u00e8 l'unica composta da pi\u00f9 di 7 colonne, e la query XPATH per estrarla \u00e8 //table[count(tr/td)>7] . La pagina di origine ha l' encoding in ISO-8859-1 , ed \u00e8 da convertire in UTF-8 . Per scaricare la pagina, cambiarne l' encoding ed estrarre la tabella di interesse il comando pu\u00f2 essere curl \"http://www.sias.regione.sicilia.it/NHEOWLH140_00_1.html\" | \\ iconv -f ISO-8859-1 -t utf-8 | \\ scrape -be '//table[count(tr/td)>7]' L' utility usata sopra per fare la query XPATH \u00e8 scrape-cli . In output si ha una pagina web che contiene soltanto la tabella di interesse. Per passarla a VisiData bisogner\u00e0 modificare cos\u00ec lo script: curl \"http://www.sias.regione.sicilia.it/NHEOWLH140_00_1.html\" | \\ iconv -f ISO-8859-1 -t utf-8 | \\ scrape -be '//table[count(tr/td)>7]' | \\ vd -f html Come risultato si aprir\u00e0 la finestra di sotto. Per aprire la tabella sar\u00e0 necessario premere INVIO e poi si potr\u00e0 salvare la tabella in CSV (o altri formati) digitando CTRL+ s . Se si vuole inserire nello script anche la procedura di salvataggio, bisogna modificare lo script in questo modo: curl \"http://www.sias.regione.sicilia.it/NHEOWLH140_00_1.html\" | \\ iconv -f ISO-8859-1 -t utf-8 | \\ scrape -be '//table[count(tr/td)>7]' | \\ vd -b -f html -o out.csv -p dive.vd Note: -b \u00e8 per eseguire VisiData senza interfaccia; -p dive.vd per eseguire dei comandi (qui semplicemente l'apertura della tabella a partire dalla finestra iniziale di sopra). Nel file dive.vd c'\u00e8 il seguente contenuto. sheet col row longname input keystrokes comment open-file - o - 0 dive-row ^J Il file di sopra \u00e8 un file di log di VisiData (vedi sezione dedicata ). Tutte le operazioni fatte in VisiData finiscono in un log che pu\u00f2 essere visualizzato e salvato. Quindi \u00e8 possibile salvare la visualizzazione dell'elenco delle tabelle e poi l'apertura di quella di interesse. Per creare questo di sopra: arrivare a visualizzare la tabella su VisiData; digitare INVIO ; digitate SHIFT + d per visualizzare il log dei comandi; e infine CTRL + s per salvare il file dive.vd .","title":"Salvare una tabella HTML in CSV, a partire da una pagina web"},{"location":"guida/#fare-proposte-eo-chiedere-supporto","text":"Il luogo dove farlo \u00e8 senz'altro questo https://github.com/saulpw/visidata/issues . \u00c8 bene farlo scrivendo sempre la versione di VisiData utilizzata, allegare i dati per replicare eventuali problemi riscontrati, documentare la procedura che si vuole realizzare.","title":"Fare proposte e/o Chiedere supporto"},{"location":"guida/#note-finali","text":"Il grande Jeremy Singer Vine lo usa da molto pi\u00f9 tempo di me e ha creato la migliore guida introduttiva dedicata in inglese https://jsvine.github.io/intro-to-visidata/ , di cui sono felice di essere nei ringraziamenti . Ne ho attinto a piene mani per scrivere questo post e colgo l'occasione per ringraziarlo di cuore pubblicamente. \u00c8 un'applicazione molto bella, che probabilmente per alcuni diverr\u00e0 (come \u00e8 adesso per me) di uso quotidiano. Jeremy afferma che per analisi complesse, analisi geospaziali, data literature \u00e8 meglio usare altro. Mi sembra sensato. Non sostituisce R o Pandas, ma li pu\u00f2 certamente affiancare e spesso precedere nel workflow di lavoro sui dati. \u00c8 un altro strumento che consiglio di aggiungere nella cassetta degli attrezzi. Lo sviluppatore principale e chi collabora con lui sono molto attenti alle richieste e alle proposte che vengono dall'esterno, in una bella mescolanza di sensibilit\u00e0 \"tecnologica\" e umana. In queste settimane ho aperto diverse issue a cui \u00e8 stato dato sempre riscontro. Alcune erano richieste da uomo primitivo, altre erano buone: confesso di essere orgoglioso di avere avuto degli effetti nel rilascio dell'ultima versione (la 1.5.1) e di essere citato pi\u00f9 volte nelle note di rilascio . Ringrazio molto Saul Pwanson e Anja Kefala . A breve gli proporr\u00f2 l'integrazione in lettura e scrittura dei datapackage , in modo da estendere la qualit\u00e0 e le modalit\u00e0 di lavoro su dati ben descritti e strutturati. ( fatto ) Qui vorremmo aggiornare e arricchire nel tempo i testi e si accettano anche proposte di integrazioni , correzioni e modifiche .","title":"Note finali"},{"location":"guida/#url-consigliati","text":"la guida di Jeremy Singer Vine https://jsvine.github.io/intro-to-visidata/ le ricette sul sito ufficiale http://visidata.org/docs/ ; la documentazione ufficiale http://visidata.org/man/ ; la playlist YouTube a cura dell'autore https://www.youtube.com/playlist?list=PLxu7QdBkC7drrAGfYzatPGVHIpv4Et46W ; la lista visuale degli shortcut da tastiera http://visidata.org/docs/kblayout/ .","title":"URL consigliati"},{"location":"privacy/","text":"Informativa privacy estesa \u21b5 In linea con la legislazione Europea, \u00e8 fondamentale che ogni utente del sito web comprenda cosa sono i cookie e per quale motivo vengono utilizzati, in modo che gli utenti stessi possano decidere consapevolmente se accettarne l\u2019utilizzo o no sui loro dispositivi. Un cookie \u00e8 un piccolo file di testo contenente un numero di identificazione univoco che viene trasferito dal sito web sul disco rigido del vostro computer attraverso un codice anonimo in grado di identificare il computer ma non l\u2019utente e di monitorare passivamente le vostre attivit\u00e0 sul sito. I cookie possono essere classificati in due categorie, in base alle loro funzionalit\u00e0: Cookie tecnici (di cui fanno parte i cookie sulle prestazioni e i cookie funzionali) Cookie profilanti (di cui fanno parte i cookie legati alle pubblicit\u00e0) Il sito utilizza solo il primo tipo di cookie, di tipo tecnico, per i quali non \u00e8 richiesto alcun consenso. Nel dettaglio vengono utlizzati le seguenti tipologie di cookie: Cookie strettamente necessari Questi cookie sono essenziali al fine di permettere la navigazione del sito web e l\u2019utilizzo delle sue funzionalit\u00e0, come ad esempio l\u2019accesso ad alcune aree protette. Senza questi cookie, alcune funzionalit\u00e0 richieste come ad esempio il login al sito o l\u2019inserimento degli articoli da parte dei collaboratori non potrebbero essere fornite. Cookie sulle prestazioni Questi cookie raccolgono informazioni su come gli utenti utilizzano il sito web, ad esempio quali pagine vengono visitate pi\u00f9 spesso e se gli utenti ricevono messaggi di errore da queste pagine. Questi cookie non raccolgono informazioni che identificano un visitatore specifico. Tutte le informazioni raccolte da questi cookie sono aggregate e quindi anonime. Vengono utilizzate unicamente per migliorare il funzionamento del sito web. Cookie di analisi di traffico anonimizzati Questo sito web utilizza inoltre i cookie di Google Analytics , un servizio di analisi web fornito da Google. Le informazioni generate dal cookie sull\u2019utilizzo del sito web da parte vostra (compreso il vostro indirizzo IP) verranno trasmesse e depositate presso i server di Google che utilizzer\u00e0 queste informazioni allo scopo di tracciare ed esaminare il vostro utilizzo del sito web, compilare report sulle attivit\u00e0 svolte sul sito web e fornire altri servizi relativi alle attivit\u00e0 e all\u2019utilizzo di Internet. I dati generati da Google Analytics sono conservati da Google cos\u00ec come indicato nella Informativa reperibile al seguente link. L\u2019utente pu\u00f2 disabilitare in modo selettivo l\u2019azione di Google Analytics installando sul proprio browser la componente di opt-out fornito da Google. Per disabilitare l\u2019azione di Google Analytics, si rinvia al link di seguito indicato: https://tools.google.com/dlpage/gaoptout Cookie funzionali Questi cookie consentono al sito web di ricordare le scelte che avete effettuato (come il vostro username, la vostra lingua o l\u2019area geografica in cui vivete) al fine di ottimizzare e fornire funzionalit\u00e0 pi\u00f9 avanzate. Questi cookie possono inoltre essere utilizzati per fornire funzionalit\u00e0 da voi richieste come ad esempio la visualizzazione di un video o la possibilit\u00e0 di commentare sul sito. Queste informazioni raccolte dai cookie possono essere anonime e non devono tracciare la navigazione e le attivit\u00e0 dell\u2019utente su altri siti web. Vi preghiamo di considerare che alcune funzionalit\u00e0 del sito web potrebbero essere ridotte o non disponibili disabilitando i cookie. Nel dettaglio, gli utenti possono controllare, eliminare o impedire il caricamento di cookie agendo sui loro browser cos\u00ec come sotto indicato. Cookie di terze parti \u21b5 Google Analytics Il Sito impiega Google Analytics. Si tratta di un servizio di analisi web fornito da Google Inc. (\u201cGoogle\u201d) che utilizza cookie depositati sul computer dell\u2019utente per consentire analisi statistiche in forma aggregata in ordine all\u2019utilizzo del sito web visitato. I dati generati da Google Analytics sono conservati da Google cos\u00ec come indicato nella Informativa reperibile al seguente link \u2013 https://developers.google.com/analytics/devguides/collection/analyticsjs/cookie-usage Per consultare l\u2019informativa privacy della societ\u00e0 Google Inc., titolare autonomo del trattamento dei dati relativi al servizio Google Analytics, si rinvia al sito Internet. Google Fonts (What does using the Google Fonts API mean for the privacy of my users?) Questo sito web utilizza API di Google Fonts, l\u2019uso di Google Fonts non \u00e8 autenticato. Nessun cookie viene inviato dai visitatori del sito web all\u2019API di Google Fonts. Le richieste all\u2019API di Google Fonts vengono eseguite su domini specifici delle risorse, come fonts.googleapis.com o fonts.gstatic.com , in modo che le richieste per i caratteri siano separate e non contengano credenziali inviate a google.com mentre utilizzando altri servizi Google autenticati, come Gmail. Le richieste per le risorse CSS vengono memorizzate nella cache per 1 giorno. Per ulteriori informazioni sulle informazioni raccolte da Google e su come vengono utilizzate e protette, consulta le Norme sulla privacy di Google Widget Social Network \u21b5 I widget dei social network sono quei particolari \u201cpulsanti\u201d o \u201cblocchi\u201d presenti sul sito che raffigurano le icone di social network (esempio, Facebook e Twitter) e consentono agli utenti che stanno navigando di interagire con un \u201cclick\u201d direttamente con le piattaforme social. Si riportano i link ove l\u2019utente pu\u00f2 prendere visione dell\u2019informativa privacy relativa alla gestione dei dati da parte dei social cui i pulsanti e le widget rinviano. Nessuna informazione viene condivisa dal sito in cui il widget \u00e8 incorporato. Per maggiori informazioni, anche sulla disattivazione di tali cookie, si consiglia di consultare i seguenti link: Twitter Facebook LinkedIn Google Plus AddThis Pubblicit\u00e0 \u21b5 Sono presenti annunci di pubblicit\u00e0 etica di Read the Docs che rispetta la privacy degli utenti. La pubblicit\u00e0 etica \u00e8 la fonte princiaple del progetto Read the Docs . Come disabilitare i cookie mediante configurazione del browser \u21b5 Fermo restando quanto sopra indicato in ordine ai cookie strettamente necessari alla navigazione, l\u2019utente pu\u00f2 eliminare gli altri cookie attraverso la funzionalit\u00e0 a tal fine messa a disposizione dal Titolare tramite la presente informativa oppure direttamente tramite il proprio browser. Ciascun browser presenta procedure diverse per la gestione delle impostazioni. L\u2019utente pu\u00f2 ottenere istruzioni specifiche attraverso i link sottostanti. Google Chrome Mozilla Firefox Internet Explorer Safari Safari IOs Opera Google Chrome Eseguire il Browser Chrome Fare click sul men\u00f9 presente nella barra degli strumenti del browser a fianco della finestra di inserimento url per la navigazione Selezionare Impostazioni Fare clic su Mostra Impostazioni Avanzate Nella sezione \u201cPrivacy\u201d fare clic su bottone \u201cImpostazioni contenuti\u201c Nella sezione \u201cCookie\u201d \u00e8 possibile modificare le seguenti impostazioni relative ai cookie: Consentire il salvataggio dei dati in locale Modificare i dati locali solo fino alla chiusura del browser Impedire ai siti di impostare i cookie Bloccare i cookie di terze parti e i dati dei siti Gestire le eccezioni per alcuni siti internet Eliminazione di uno o tutti i cookie Mozilla Firefox - Eseguire il Browser Mozilla Firefox - Fare click sul men\u00f9 presente nella barra degli strumenti del browser a fianco della finestra di inserimento url per la navigazione - Selezionare Opzioni - Seleziona il pannello Privacy - Fare clic su Mostra Impostazioni Avanzate - Nella sezione \u201cPrivacy\u201d fare clic su bottone \u201cImpostazioni contenuti\u201c - Nella sezione \u201cTracciamento\u201d \u00e8 possibile modificare le seguenti impostazioni relative ai cookie: - Richiedi ai siti di non effettuare alcun tracciamento - Comunica ai siti la disponibilit\u00e0 ad essere tracciato - Non comunicare alcuna preferenza relativa al tracciamento dei dati personali - Dalla sezione \u201cCronologia\u201d \u00e8 possibile: - Abilitando \u201cUtilizza impostazioni personalizzate\u201d selezionare di accettare i cookie di terze parti (sempre, dai siti pi\u00f9 visitato o mai) e di conservarli per un periodo determinato (fino alla loro scadenza, alla chiusura di Firefox o di chiedere ogni volta) - Rimuovere i singoli cookie immagazzinati Internet Explorer Eseguire il Browser Internet Explorer Fare click sul pulsante Strumenti e scegliere Opzioni Internet Fare click sulla scheda Privacy e nella sezione Impostazioni modificare il dispositivo di scorrimento in funzione dell\u2019azione desiderata per i cookie: Bloccare tutti i cookie Consentire tutti i cookie Selezione dei siti da cui ottenere cookie: spostare il cursore in una posizione intermedia in modo da non bloccare o consentire tutti i cookie, premere quindi su Siti, nella casella Indirizzo Sito Web inserire un sito internet e quindi premere su Blocca o Consenti Safari Eseguire il Browser Safari Fare click su Safari, selezionare Preferenze e premere su Privacy Nella sezione Blocca Cookie specificare come Safari deve accettare i cookie dai siti internet. Per visionare quali siti hanno immagazzinato i cookie cliccare su Dettagli Safari IOs (Dispositivi Mobile) Eseguire il Browser Safari iOS Tocca su Impostazioni e poi Safari Tocca su Blocca Cookie e scegli tra le varie opzioni: \u201cMai\u201d, \u201cDi terze parti e inserzionisti\u201d o \u201cSempre\u201d Per cancellare tutti i cookie immagazzinati da Safari, tocca su Impostazioni, poi su Safari e infine suCancella Cookie e dati Opera Eseguire il Browser Opera Fare click sul Preferenze poi su Avanzate e infine su Cookie Selezionare una delle seguenti opzioni: Accetta tutti i cookie Accetta i cookie solo dal sito che si visita: i cookie di terze parti e che vengono inviati da un dominio diverso da quello che si sta visitando verranno rifiutati Non accettare mai i cookie: tutti i cookie non verranno mai salvati Come indicato, l\u2019Utente potr\u00e0 negare il consenso all\u2019installazione dei cookie per il mezzo del browser di navigazione in uso seguendo le istruzioni ivi fornite o accedendo al sito http://www.youronlinechoices.com/it/le-tue-scelte/. Per ulteriori informazioni su come cancellare e controllare i cookie archiviati sul computer, si prega di consultare http://www.allaboutcookies.org/manage-cookies/index. Non possiamo tuttavia garantire la correttezza e l\u2019aggiornamento delle informazioni ivi contenute.","title":"Informativa privacy estesa"},{"location":"privacy/#informativa-privacy-estesa","text":"In linea con la legislazione Europea, \u00e8 fondamentale che ogni utente del sito web comprenda cosa sono i cookie e per quale motivo vengono utilizzati, in modo che gli utenti stessi possano decidere consapevolmente se accettarne l\u2019utilizzo o no sui loro dispositivi. Un cookie \u00e8 un piccolo file di testo contenente un numero di identificazione univoco che viene trasferito dal sito web sul disco rigido del vostro computer attraverso un codice anonimo in grado di identificare il computer ma non l\u2019utente e di monitorare passivamente le vostre attivit\u00e0 sul sito. I cookie possono essere classificati in due categorie, in base alle loro funzionalit\u00e0: Cookie tecnici (di cui fanno parte i cookie sulle prestazioni e i cookie funzionali) Cookie profilanti (di cui fanno parte i cookie legati alle pubblicit\u00e0) Il sito utilizza solo il primo tipo di cookie, di tipo tecnico, per i quali non \u00e8 richiesto alcun consenso. Nel dettaglio vengono utlizzati le seguenti tipologie di cookie: Cookie strettamente necessari Questi cookie sono essenziali al fine di permettere la navigazione del sito web e l\u2019utilizzo delle sue funzionalit\u00e0, come ad esempio l\u2019accesso ad alcune aree protette. Senza questi cookie, alcune funzionalit\u00e0 richieste come ad esempio il login al sito o l\u2019inserimento degli articoli da parte dei collaboratori non potrebbero essere fornite. Cookie sulle prestazioni Questi cookie raccolgono informazioni su come gli utenti utilizzano il sito web, ad esempio quali pagine vengono visitate pi\u00f9 spesso e se gli utenti ricevono messaggi di errore da queste pagine. Questi cookie non raccolgono informazioni che identificano un visitatore specifico. Tutte le informazioni raccolte da questi cookie sono aggregate e quindi anonime. Vengono utilizzate unicamente per migliorare il funzionamento del sito web. Cookie di analisi di traffico anonimizzati Questo sito web utilizza inoltre i cookie di Google Analytics , un servizio di analisi web fornito da Google. Le informazioni generate dal cookie sull\u2019utilizzo del sito web da parte vostra (compreso il vostro indirizzo IP) verranno trasmesse e depositate presso i server di Google che utilizzer\u00e0 queste informazioni allo scopo di tracciare ed esaminare il vostro utilizzo del sito web, compilare report sulle attivit\u00e0 svolte sul sito web e fornire altri servizi relativi alle attivit\u00e0 e all\u2019utilizzo di Internet. I dati generati da Google Analytics sono conservati da Google cos\u00ec come indicato nella Informativa reperibile al seguente link. L\u2019utente pu\u00f2 disabilitare in modo selettivo l\u2019azione di Google Analytics installando sul proprio browser la componente di opt-out fornito da Google. Per disabilitare l\u2019azione di Google Analytics, si rinvia al link di seguito indicato: https://tools.google.com/dlpage/gaoptout Cookie funzionali Questi cookie consentono al sito web di ricordare le scelte che avete effettuato (come il vostro username, la vostra lingua o l\u2019area geografica in cui vivete) al fine di ottimizzare e fornire funzionalit\u00e0 pi\u00f9 avanzate. Questi cookie possono inoltre essere utilizzati per fornire funzionalit\u00e0 da voi richieste come ad esempio la visualizzazione di un video o la possibilit\u00e0 di commentare sul sito. Queste informazioni raccolte dai cookie possono essere anonime e non devono tracciare la navigazione e le attivit\u00e0 dell\u2019utente su altri siti web. Vi preghiamo di considerare che alcune funzionalit\u00e0 del sito web potrebbero essere ridotte o non disponibili disabilitando i cookie. Nel dettaglio, gli utenti possono controllare, eliminare o impedire il caricamento di cookie agendo sui loro browser cos\u00ec come sotto indicato.","title":"Informativa privacy estesa"},{"location":"privacy/#cookie-di-terze-parti","text":"Google Analytics Il Sito impiega Google Analytics. Si tratta di un servizio di analisi web fornito da Google Inc. (\u201cGoogle\u201d) che utilizza cookie depositati sul computer dell\u2019utente per consentire analisi statistiche in forma aggregata in ordine all\u2019utilizzo del sito web visitato. I dati generati da Google Analytics sono conservati da Google cos\u00ec come indicato nella Informativa reperibile al seguente link \u2013 https://developers.google.com/analytics/devguides/collection/analyticsjs/cookie-usage Per consultare l\u2019informativa privacy della societ\u00e0 Google Inc., titolare autonomo del trattamento dei dati relativi al servizio Google Analytics, si rinvia al sito Internet. Google Fonts (What does using the Google Fonts API mean for the privacy of my users?) Questo sito web utilizza API di Google Fonts, l\u2019uso di Google Fonts non \u00e8 autenticato. Nessun cookie viene inviato dai visitatori del sito web all\u2019API di Google Fonts. Le richieste all\u2019API di Google Fonts vengono eseguite su domini specifici delle risorse, come fonts.googleapis.com o fonts.gstatic.com , in modo che le richieste per i caratteri siano separate e non contengano credenziali inviate a google.com mentre utilizzando altri servizi Google autenticati, come Gmail. Le richieste per le risorse CSS vengono memorizzate nella cache per 1 giorno. Per ulteriori informazioni sulle informazioni raccolte da Google e su come vengono utilizzate e protette, consulta le Norme sulla privacy di Google","title":"Cookie di terze parti"},{"location":"privacy/#widget-social-network","text":"I widget dei social network sono quei particolari \u201cpulsanti\u201d o \u201cblocchi\u201d presenti sul sito che raffigurano le icone di social network (esempio, Facebook e Twitter) e consentono agli utenti che stanno navigando di interagire con un \u201cclick\u201d direttamente con le piattaforme social. Si riportano i link ove l\u2019utente pu\u00f2 prendere visione dell\u2019informativa privacy relativa alla gestione dei dati da parte dei social cui i pulsanti e le widget rinviano. Nessuna informazione viene condivisa dal sito in cui il widget \u00e8 incorporato. Per maggiori informazioni, anche sulla disattivazione di tali cookie, si consiglia di consultare i seguenti link: Twitter Facebook LinkedIn Google Plus AddThis","title":"Widget Social Network"},{"location":"privacy/#pubblicita","text":"Sono presenti annunci di pubblicit\u00e0 etica di Read the Docs che rispetta la privacy degli utenti. La pubblicit\u00e0 etica \u00e8 la fonte princiaple del progetto Read the Docs .","title":"Pubblicit\u00e0"},{"location":"privacy/#come-disabilitare-i-cookie-mediante-configurazione-del-browser","text":"Fermo restando quanto sopra indicato in ordine ai cookie strettamente necessari alla navigazione, l\u2019utente pu\u00f2 eliminare gli altri cookie attraverso la funzionalit\u00e0 a tal fine messa a disposizione dal Titolare tramite la presente informativa oppure direttamente tramite il proprio browser. Ciascun browser presenta procedure diverse per la gestione delle impostazioni. L\u2019utente pu\u00f2 ottenere istruzioni specifiche attraverso i link sottostanti. Google Chrome Mozilla Firefox Internet Explorer Safari Safari IOs Opera Google Chrome Eseguire il Browser Chrome Fare click sul men\u00f9 presente nella barra degli strumenti del browser a fianco della finestra di inserimento url per la navigazione Selezionare Impostazioni Fare clic su Mostra Impostazioni Avanzate Nella sezione \u201cPrivacy\u201d fare clic su bottone \u201cImpostazioni contenuti\u201c Nella sezione \u201cCookie\u201d \u00e8 possibile modificare le seguenti impostazioni relative ai cookie: Consentire il salvataggio dei dati in locale Modificare i dati locali solo fino alla chiusura del browser Impedire ai siti di impostare i cookie Bloccare i cookie di terze parti e i dati dei siti Gestire le eccezioni per alcuni siti internet Eliminazione di uno o tutti i cookie Mozilla Firefox - Eseguire il Browser Mozilla Firefox - Fare click sul men\u00f9 presente nella barra degli strumenti del browser a fianco della finestra di inserimento url per la navigazione - Selezionare Opzioni - Seleziona il pannello Privacy - Fare clic su Mostra Impostazioni Avanzate - Nella sezione \u201cPrivacy\u201d fare clic su bottone \u201cImpostazioni contenuti\u201c - Nella sezione \u201cTracciamento\u201d \u00e8 possibile modificare le seguenti impostazioni relative ai cookie: - Richiedi ai siti di non effettuare alcun tracciamento - Comunica ai siti la disponibilit\u00e0 ad essere tracciato - Non comunicare alcuna preferenza relativa al tracciamento dei dati personali - Dalla sezione \u201cCronologia\u201d \u00e8 possibile: - Abilitando \u201cUtilizza impostazioni personalizzate\u201d selezionare di accettare i cookie di terze parti (sempre, dai siti pi\u00f9 visitato o mai) e di conservarli per un periodo determinato (fino alla loro scadenza, alla chiusura di Firefox o di chiedere ogni volta) - Rimuovere i singoli cookie immagazzinati Internet Explorer Eseguire il Browser Internet Explorer Fare click sul pulsante Strumenti e scegliere Opzioni Internet Fare click sulla scheda Privacy e nella sezione Impostazioni modificare il dispositivo di scorrimento in funzione dell\u2019azione desiderata per i cookie: Bloccare tutti i cookie Consentire tutti i cookie Selezione dei siti da cui ottenere cookie: spostare il cursore in una posizione intermedia in modo da non bloccare o consentire tutti i cookie, premere quindi su Siti, nella casella Indirizzo Sito Web inserire un sito internet e quindi premere su Blocca o Consenti Safari Eseguire il Browser Safari Fare click su Safari, selezionare Preferenze e premere su Privacy Nella sezione Blocca Cookie specificare come Safari deve accettare i cookie dai siti internet. Per visionare quali siti hanno immagazzinato i cookie cliccare su Dettagli Safari IOs (Dispositivi Mobile) Eseguire il Browser Safari iOS Tocca su Impostazioni e poi Safari Tocca su Blocca Cookie e scegli tra le varie opzioni: \u201cMai\u201d, \u201cDi terze parti e inserzionisti\u201d o \u201cSempre\u201d Per cancellare tutti i cookie immagazzinati da Safari, tocca su Impostazioni, poi su Safari e infine suCancella Cookie e dati Opera Eseguire il Browser Opera Fare click sul Preferenze poi su Avanzate e infine su Cookie Selezionare una delle seguenti opzioni: Accetta tutti i cookie Accetta i cookie solo dal sito che si visita: i cookie di terze parti e che vengono inviati da un dominio diverso da quello che si sta visitando verranno rifiutati Non accettare mai i cookie: tutti i cookie non verranno mai salvati Come indicato, l\u2019Utente potr\u00e0 negare il consenso all\u2019installazione dei cookie per il mezzo del browser di navigazione in uso seguendo le istruzioni ivi fornite o accedendo al sito http://www.youronlinechoices.com/it/le-tue-scelte/. Per ulteriori informazioni su come cancellare e controllare i cookie archiviati sul computer, si prega di consultare http://www.allaboutcookies.org/manage-cookies/index. Non possiamo tuttavia garantire la correttezza e l\u2019aggiornamento delle informazioni ivi contenute.","title":"Come disabilitare i cookie mediante configurazione del browser"},{"location":"salvare_procedura_da_applicare/","text":"Come salvare un insieme di operazioni e applicarle come modello ad altri file \u21b5 Introduzione \u21b5 In VisiData \u00e8 possibile salvare il log delle operazione fatte e riutilizzarlo per applicarle nuovamente al file di input. Se ad esempio a partire da questo file CSV (sotto l'anteprima) si volessero cancellare tutte le righe che contengono il solo carattere a e infine salvare l' output , la procedura \u00e8: vd input.csv ; posizionarsi nella prima colonna e pigiare | per attivare la selezione tramite espressione regolare, scrivere ^a$ e premere INVIO . Verr\u00e0 fatta la selezione descritta; pigiare in sequenza g e d per cancellare le righe selezionate; poi CTRL+s ; e infine scegliere un nome di output (ad esempio output.csv ) e pigiare INVIO per salvare il file. field1 field2 a 0 b 3 a 4 c 5 Per salvare la procedura di sopra in un file di log, bisogner\u00e0 premere CTRL+d , scegliere un nome per salvare il file (ad esempio cancella_le_a.vd ) e pigiare INVIO . Il file di log salvato avr\u00e0 un contenuto come quello sottostante ( \u00e8 un file TSV ), in cui sono \"mappate\" tutte le operazioni fatte: sheet col row longname input keystrokes comment global null_value set-option open-file input.csv o input field1 select-col-regex ^a$ | select rows matching regex in current column input delete-selected gd delete (cut) selected rows and move them to clipboard input save-sheet output.csv ^S save current sheet to filename in format determined by extension (default .tsv) Per riapplicare la stessa procedura al file, senza interagire con lo schermo, il comando da lanciare \u00e8: vd -b -p cancella_le_a.vd -b per eseguire VisiData senza attivarne l'interfaccia; -p per replicare un file di log. Se questo comando si lancia dopo avere gi\u00e0 creato il file di output , si avr\u00e0 un messaggio di errore, che avvisa che il file esiste gi\u00e0 e non pu\u00f2 essere sovrascritto. Per fare in modo che venga sovrascritto bisogner\u00e0 aggiungere l'opzione -y : vd -y -b -p cancella_le_a.vd A schermo verr\u00e0 restituito l'elenco delle operazione svolte: opening cancella_le_a.vd as vd \"input.csv\" opening input.csv as csv select rows matching regex in current column \"^a$\" search wrapped 2 matches for /^a$/ selected 2 rows delete (cut) selected rows and move them to clipboard copied 2 rows to clipboard deleted 2 rows save current sheet to filename in format determined by extension (default .tsv) \"output.csv\" saving 1 sheets to output.csv as csv replay complete Applicare le stesse procedure a un file diverso, ma omologo \u21b5 Spesso si ha la necessit\u00e0 di applicare una stessa procedura ad altri file , con la stessa struttura , ma con contenuti differenti . Per utilizzare il file di log creato con un file diverso da input.csv , bisogner\u00e0 modificare il file di log (si modifica con qualsiasi editor di testo): rimuovere la riga con il riferimento a input.csv rimuovere il riferimento al nome del foglio (qui \u00e8 input , come il nome del file). Diventer\u00e0 quindi: sheet col row longname input keystrokes comment global null_value set-option field1 select-col-regex ^a$ | select rows matching regex in current column delete-selected gd delete (cut) selected rows and move them to clipboard save-sheet output.csv ^S save current sheet to filename in format determined by extension (default .tsv) Fatto questo, il comando da usare con un nuovo file denominato ad esempio input_nuovo.csv sar\u00e0: vd -y -b -p cancella_le_a.vd input_nuovo.csv In output verr\u00e0 creato il file output.csv . Se si vuole creare un file di output con nome diverso, si deve cancellare dal file di log la riga in cui si fa riferimento a output.csv e lanciare il comando: vd -y -b -p cancella_le_a.vd input_nuovo.csv -o output_nuovo.csv Nota sul file di log \u21b5 Si tratta di un TSV, quindi \u00e8 possibile leggerlo con un client dedicato. Quello di sopra ad esempio \u00e8: sheet col row longname input keystrokes comment global null_value set-option field1 select-col-regex ^a$ delete-selected gd delete (cut) selected rows and move them to clipboard save-sheet output.csv ^S save current sheet to filename in format determined by extension (default .tsv)","title":"Come salvare un insieme di operazioni e applicarle come modello ad altri file"},{"location":"salvare_procedura_da_applicare/#come-salvare-un-insieme-di-operazioni-e-applicarle-come-modello-ad-altri-file","text":"","title":"Come salvare un insieme di operazioni e applicarle come modello ad altri file"},{"location":"salvare_procedura_da_applicare/#introduzione","text":"In VisiData \u00e8 possibile salvare il log delle operazione fatte e riutilizzarlo per applicarle nuovamente al file di input. Se ad esempio a partire da questo file CSV (sotto l'anteprima) si volessero cancellare tutte le righe che contengono il solo carattere a e infine salvare l' output , la procedura \u00e8: vd input.csv ; posizionarsi nella prima colonna e pigiare | per attivare la selezione tramite espressione regolare, scrivere ^a$ e premere INVIO . Verr\u00e0 fatta la selezione descritta; pigiare in sequenza g e d per cancellare le righe selezionate; poi CTRL+s ; e infine scegliere un nome di output (ad esempio output.csv ) e pigiare INVIO per salvare il file. field1 field2 a 0 b 3 a 4 c 5 Per salvare la procedura di sopra in un file di log, bisogner\u00e0 premere CTRL+d , scegliere un nome per salvare il file (ad esempio cancella_le_a.vd ) e pigiare INVIO . Il file di log salvato avr\u00e0 un contenuto come quello sottostante ( \u00e8 un file TSV ), in cui sono \"mappate\" tutte le operazioni fatte: sheet col row longname input keystrokes comment global null_value set-option open-file input.csv o input field1 select-col-regex ^a$ | select rows matching regex in current column input delete-selected gd delete (cut) selected rows and move them to clipboard input save-sheet output.csv ^S save current sheet to filename in format determined by extension (default .tsv) Per riapplicare la stessa procedura al file, senza interagire con lo schermo, il comando da lanciare \u00e8: vd -b -p cancella_le_a.vd -b per eseguire VisiData senza attivarne l'interfaccia; -p per replicare un file di log. Se questo comando si lancia dopo avere gi\u00e0 creato il file di output , si avr\u00e0 un messaggio di errore, che avvisa che il file esiste gi\u00e0 e non pu\u00f2 essere sovrascritto. Per fare in modo che venga sovrascritto bisogner\u00e0 aggiungere l'opzione -y : vd -y -b -p cancella_le_a.vd A schermo verr\u00e0 restituito l'elenco delle operazione svolte: opening cancella_le_a.vd as vd \"input.csv\" opening input.csv as csv select rows matching regex in current column \"^a$\" search wrapped 2 matches for /^a$/ selected 2 rows delete (cut) selected rows and move them to clipboard copied 2 rows to clipboard deleted 2 rows save current sheet to filename in format determined by extension (default .tsv) \"output.csv\" saving 1 sheets to output.csv as csv replay complete","title":"Introduzione"},{"location":"salvare_procedura_da_applicare/#applicare-le-stesse-procedure-a-un-file-diverso-ma-omologo","text":"Spesso si ha la necessit\u00e0 di applicare una stessa procedura ad altri file , con la stessa struttura , ma con contenuti differenti . Per utilizzare il file di log creato con un file diverso da input.csv , bisogner\u00e0 modificare il file di log (si modifica con qualsiasi editor di testo): rimuovere la riga con il riferimento a input.csv rimuovere il riferimento al nome del foglio (qui \u00e8 input , come il nome del file). Diventer\u00e0 quindi: sheet col row longname input keystrokes comment global null_value set-option field1 select-col-regex ^a$ | select rows matching regex in current column delete-selected gd delete (cut) selected rows and move them to clipboard save-sheet output.csv ^S save current sheet to filename in format determined by extension (default .tsv) Fatto questo, il comando da usare con un nuovo file denominato ad esempio input_nuovo.csv sar\u00e0: vd -y -b -p cancella_le_a.vd input_nuovo.csv In output verr\u00e0 creato il file output.csv . Se si vuole creare un file di output con nome diverso, si deve cancellare dal file di log la riga in cui si fa riferimento a output.csv e lanciare il comando: vd -y -b -p cancella_le_a.vd input_nuovo.csv -o output_nuovo.csv","title":"Applicare le stesse procedure a un file diverso, ma omologo"},{"location":"salvare_procedura_da_applicare/#nota-sul-file-di-log","text":"Si tratta di un TSV, quindi \u00e8 possibile leggerlo con un client dedicato. Quello di sopra ad esempio \u00e8: sheet col row longname input keystrokes comment global null_value set-option field1 select-col-regex ^a$ delete-selected gd delete (cut) selected rows and move them to clipboard save-sheet output.csv ^S save current sheet to filename in format determined by extension (default .tsv)","title":"Nota sul file di log"}]}